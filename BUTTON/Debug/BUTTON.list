
BUTTON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003058  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003164  08003164  00013164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003184  08003184  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003184  08003184  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003184  08003184  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003184  08003184  00013184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003188  08003188  00013188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800318c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000068  080031f4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  080031f4  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b53  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b64  00000000  00000000  00029be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002b748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002c1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f33  00000000  00000000  0002cb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c16e  00000000  00000000  00043a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824a6  00000000  00000000  0004fbf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d209f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002950  00000000  00000000  000d20f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800314c 	.word	0x0800314c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800314c 	.word	0x0800314c

0800014c <blink_led_red>:
 *      Author: HP
 */

#include "blink_led.h"

void blink_led_red(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(timer2_flag == 1) {
 8000150:	4b0d      	ldr	r3, [pc, #52]	; (8000188 <blink_led_red+0x3c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d114      	bne.n	8000182 <blink_led_red+0x36>
		HAL_GPIO_TogglePin(red1_GPIO_Port ,red1_Pin);
 8000158:	2108      	movs	r1, #8
 800015a:	480c      	ldr	r0, [pc, #48]	; (800018c <blink_led_red+0x40>)
 800015c:	f001 ffe5 	bl	800212a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(red2_GPIO_Port ,red2_Pin);
 8000160:	2140      	movs	r1, #64	; 0x40
 8000162:	480a      	ldr	r0, [pc, #40]	; (800018c <blink_led_red+0x40>)
 8000164:	f001 ffe1 	bl	800212a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(red3_GPIO_Port ,red3_Pin);
 8000168:	f44f 7100 	mov.w	r1, #512	; 0x200
 800016c:	4807      	ldr	r0, [pc, #28]	; (800018c <blink_led_red+0x40>)
 800016e:	f001 ffdc 	bl	800212a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(red4_GPIO_Port ,red4_Pin);
 8000172:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000176:	4805      	ldr	r0, [pc, #20]	; (800018c <blink_led_red+0x40>)
 8000178:	f001 ffd7 	bl	800212a <HAL_GPIO_TogglePin>
		setTimer2(50);
 800017c:	2032      	movs	r0, #50	; 0x32
 800017e:	f001 fb4d 	bl	800181c <setTimer2>
	}
}
 8000182:	bf00      	nop
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	200000bc 	.word	0x200000bc
 800018c:	40010800 	.word	0x40010800

08000190 <blink_led_yellow>:

void blink_led_yellow(){
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	if(timer2_flag == 1) {
 8000194:	4b0d      	ldr	r3, [pc, #52]	; (80001cc <blink_led_yellow+0x3c>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	2b01      	cmp	r3, #1
 800019a:	d114      	bne.n	80001c6 <blink_led_yellow+0x36>
		HAL_GPIO_TogglePin(yellow1_GPIO_Port ,yellow1_Pin);
 800019c:	2104      	movs	r1, #4
 800019e:	480c      	ldr	r0, [pc, #48]	; (80001d0 <blink_led_yellow+0x40>)
 80001a0:	f001 ffc3 	bl	800212a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(yellow2_GPIO_Port ,yellow2_Pin);
 80001a4:	2120      	movs	r1, #32
 80001a6:	480a      	ldr	r0, [pc, #40]	; (80001d0 <blink_led_yellow+0x40>)
 80001a8:	f001 ffbf 	bl	800212a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(yellow3_GPIO_Port ,yellow3_Pin);
 80001ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001b0:	4807      	ldr	r0, [pc, #28]	; (80001d0 <blink_led_yellow+0x40>)
 80001b2:	f001 ffba 	bl	800212a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(yellow4_GPIO_Port ,yellow4_Pin);
 80001b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001ba:	4805      	ldr	r0, [pc, #20]	; (80001d0 <blink_led_yellow+0x40>)
 80001bc:	f001 ffb5 	bl	800212a <HAL_GPIO_TogglePin>
		setTimer2(50);
 80001c0:	2032      	movs	r0, #50	; 0x32
 80001c2:	f001 fb2b 	bl	800181c <setTimer2>
	}
}
 80001c6:	bf00      	nop
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	200000bc 	.word	0x200000bc
 80001d0:	40010800 	.word	0x40010800

080001d4 <blink_led_green>:

void blink_led_green(){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	if(timer2_flag == 1) {
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <blink_led_green+0x38>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d113      	bne.n	8000208 <blink_led_green+0x34>
		HAL_GPIO_TogglePin(green1_GPIO_Port ,green1_Pin);
 80001e0:	2102      	movs	r1, #2
 80001e2:	480b      	ldr	r0, [pc, #44]	; (8000210 <blink_led_green+0x3c>)
 80001e4:	f001 ffa1 	bl	800212a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(green2_GPIO_Port ,green2_Pin);
 80001e8:	2110      	movs	r1, #16
 80001ea:	4809      	ldr	r0, [pc, #36]	; (8000210 <blink_led_green+0x3c>)
 80001ec:	f001 ff9d 	bl	800212a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(green3_GPIO_Port ,green3_Pin);
 80001f0:	2180      	movs	r1, #128	; 0x80
 80001f2:	4807      	ldr	r0, [pc, #28]	; (8000210 <blink_led_green+0x3c>)
 80001f4:	f001 ff99 	bl	800212a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(green4_GPIO_Port ,green4_Pin);
 80001f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <blink_led_green+0x3c>)
 80001fe:	f001 ff94 	bl	800212a <HAL_GPIO_TogglePin>
		setTimer2(50);
 8000202:	2032      	movs	r0, #50	; 0x32
 8000204:	f001 fb0a 	bl	800181c <setTimer2>
	}
}
 8000208:	bf00      	nop
 800020a:	bd80      	pop	{r7, pc}
 800020c:	200000bc 	.word	0x200000bc
 8000210:	40010800 	.word	0x40010800

08000214 <clearAllLed>:

void clearAllLed(){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 8000218:	2201      	movs	r2, #1
 800021a:	2108      	movs	r1, #8
 800021c:	4820      	ldr	r0, [pc, #128]	; (80002a0 <clearAllLed+0x8c>)
 800021e:	f001 ff6c 	bl	80020fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 8000222:	2201      	movs	r2, #1
 8000224:	2102      	movs	r1, #2
 8000226:	481e      	ldr	r0, [pc, #120]	; (80002a0 <clearAllLed+0x8c>)
 8000228:	f001 ff67 	bl	80020fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);
 800022c:	2201      	movs	r2, #1
 800022e:	2104      	movs	r1, #4
 8000230:	481b      	ldr	r0, [pc, #108]	; (80002a0 <clearAllLed+0x8c>)
 8000232:	f001 ff62 	bl	80020fa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(red3_GPIO_Port, red3_Pin, GPIO_PIN_SET);
 8000236:	2201      	movs	r2, #1
 8000238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800023c:	4818      	ldr	r0, [pc, #96]	; (80002a0 <clearAllLed+0x8c>)
 800023e:	f001 ff5c 	bl	80020fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green3_GPIO_Port, green3_Pin, GPIO_PIN_SET);
 8000242:	2201      	movs	r2, #1
 8000244:	2180      	movs	r1, #128	; 0x80
 8000246:	4816      	ldr	r0, [pc, #88]	; (80002a0 <clearAllLed+0x8c>)
 8000248:	f001 ff57 	bl	80020fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow3_GPIO_Port, yellow3_Pin, GPIO_PIN_SET);
 800024c:	2201      	movs	r2, #1
 800024e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000252:	4813      	ldr	r0, [pc, #76]	; (80002a0 <clearAllLed+0x8c>)
 8000254:	f001 ff51 	bl	80020fa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 8000258:	2201      	movs	r2, #1
 800025a:	2140      	movs	r1, #64	; 0x40
 800025c:	4810      	ldr	r0, [pc, #64]	; (80002a0 <clearAllLed+0x8c>)
 800025e:	f001 ff4c 	bl	80020fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 8000262:	2201      	movs	r2, #1
 8000264:	2110      	movs	r1, #16
 8000266:	480e      	ldr	r0, [pc, #56]	; (80002a0 <clearAllLed+0x8c>)
 8000268:	f001 ff47 	bl	80020fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 800026c:	2201      	movs	r2, #1
 800026e:	2120      	movs	r1, #32
 8000270:	480b      	ldr	r0, [pc, #44]	; (80002a0 <clearAllLed+0x8c>)
 8000272:	f001 ff42 	bl	80020fa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(red4_GPIO_Port, red4_Pin, GPIO_PIN_SET);
 8000276:	2201      	movs	r2, #1
 8000278:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800027c:	4808      	ldr	r0, [pc, #32]	; (80002a0 <clearAllLed+0x8c>)
 800027e:	f001 ff3c 	bl	80020fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green4_GPIO_Port, green4_Pin, GPIO_PIN_SET);
 8000282:	2201      	movs	r2, #1
 8000284:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000288:	4805      	ldr	r0, [pc, #20]	; (80002a0 <clearAllLed+0x8c>)
 800028a:	f001 ff36 	bl	80020fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellow4_GPIO_Port, yellow4_Pin, GPIO_PIN_SET);
 800028e:	2201      	movs	r2, #1
 8000290:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000294:	4802      	ldr	r0, [pc, #8]	; (80002a0 <clearAllLed+0x8c>)
 8000296:	f001 ff30 	bl	80020fa <HAL_GPIO_WritePin>
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40010800 	.word	0x40010800

080002a4 <isButton1Pressed>:

int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed(){
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <isButton1Pressed+0x20>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d104      	bne.n	80002ba <isButton1Pressed+0x16>
		button1_flag = 0;
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <isButton1Pressed+0x20>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
		return 1;
 80002b6:	2301      	movs	r3, #1
 80002b8:	e000      	b.n	80002bc <isButton1Pressed+0x18>
	}
	return 0;
 80002ba:	2300      	movs	r3, #0
}
 80002bc:	4618      	mov	r0, r3
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	20000084 	.word	0x20000084

080002c8 <isButton2Pressed>:

int isButton2Pressed(){
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <isButton2Pressed+0x20>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d104      	bne.n	80002de <isButton2Pressed+0x16>
		button2_flag = 0;
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <isButton2Pressed+0x20>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
		return 1;
 80002da:	2301      	movs	r3, #1
 80002dc:	e000      	b.n	80002e0 <isButton2Pressed+0x18>
	}
	return 0;
 80002de:	2300      	movs	r3, #0
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr
 80002e8:	20000088 	.word	0x20000088

080002ec <isButton3Pressed>:

int isButton3Pressed(){
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <isButton3Pressed+0x20>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d104      	bne.n	8000302 <isButton3Pressed+0x16>
		button3_flag = 0;
 80002f8:	4b04      	ldr	r3, [pc, #16]	; (800030c <isButton3Pressed+0x20>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
		return 1;
 80002fe:	2301      	movs	r3, #1
 8000300:	e000      	b.n	8000304 <isButton3Pressed+0x18>
	}
	return 0;
 8000302:	2300      	movs	r3, #0
}
 8000304:	4618      	mov	r0, r3
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr
 800030c:	2000008c 	.word	0x2000008c

08000310 <subKeyProcess1>:

void subKeyProcess1(){
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	//TODO
	button1_flag = 1;
 8000314:	4b03      	ldr	r3, [pc, #12]	; (8000324 <subKeyProcess1+0x14>)
 8000316:	2201      	movs	r2, #1
 8000318:	601a      	str	r2, [r3, #0]
}
 800031a:	bf00      	nop
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	20000084 	.word	0x20000084

08000328 <subKeyProcess2>:

void subKeyProcess2(){
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
	//TODO
	button2_flag = 1;
 800032c:	4b03      	ldr	r3, [pc, #12]	; (800033c <subKeyProcess2+0x14>)
 800032e:	2201      	movs	r2, #1
 8000330:	601a      	str	r2, [r3, #0]
}
 8000332:	bf00      	nop
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	20000088 	.word	0x20000088

08000340 <subKeyProcess3>:

void subKeyProcess3(){
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	//TODO
	button3_flag = 1;
 8000344:	4b03      	ldr	r3, [pc, #12]	; (8000354 <subKeyProcess3+0x14>)
 8000346:	2201      	movs	r2, #1
 8000348:	601a      	str	r2, [r3, #0]
}
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	2000008c 	.word	0x2000008c

08000358 <getKeyInput>:

void getKeyInput(){
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	//Code for button1
	KeyReg0 = KeyReg1;
 800035c:	4b5c      	ldr	r3, [pc, #368]	; (80004d0 <getKeyInput+0x178>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a5c      	ldr	r2, [pc, #368]	; (80004d4 <getKeyInput+0x17c>)
 8000362:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 8000364:	4b5c      	ldr	r3, [pc, #368]	; (80004d8 <getKeyInput+0x180>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a59      	ldr	r2, [pc, #356]	; (80004d0 <getKeyInput+0x178>)
 800036a:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 800036c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000370:	485a      	ldr	r0, [pc, #360]	; (80004dc <getKeyInput+0x184>)
 8000372:	f001 feab 	bl	80020cc <HAL_GPIO_ReadPin>
 8000376:	4603      	mov	r3, r0
 8000378:	461a      	mov	r2, r3
 800037a:	4b57      	ldr	r3, [pc, #348]	; (80004d8 <getKeyInput+0x180>)
 800037c:	601a      	str	r2, [r3, #0]
	if ((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)){
 800037e:	4b55      	ldr	r3, [pc, #340]	; (80004d4 <getKeyInput+0x17c>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	4b53      	ldr	r3, [pc, #332]	; (80004d0 <getKeyInput+0x178>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	429a      	cmp	r2, r3
 8000388:	d125      	bne.n	80003d6 <getKeyInput+0x7e>
 800038a:	4b51      	ldr	r3, [pc, #324]	; (80004d0 <getKeyInput+0x178>)
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	4b52      	ldr	r3, [pc, #328]	; (80004d8 <getKeyInput+0x180>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	429a      	cmp	r2, r3
 8000394:	d11f      	bne.n	80003d6 <getKeyInput+0x7e>
		if(KeyReg3 != KeyReg2){
 8000396:	4b52      	ldr	r3, [pc, #328]	; (80004e0 <getKeyInput+0x188>)
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	4b4f      	ldr	r3, [pc, #316]	; (80004d8 <getKeyInput+0x180>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	429a      	cmp	r2, r3
 80003a0:	d00d      	beq.n	80003be <getKeyInput+0x66>
			KeyReg3 = KeyReg2;
 80003a2:	4b4d      	ldr	r3, [pc, #308]	; (80004d8 <getKeyInput+0x180>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a4e      	ldr	r2, [pc, #312]	; (80004e0 <getKeyInput+0x188>)
 80003a8:	6013      	str	r3, [r2, #0]
			if(KeyReg2 == PRESSED_STATE){
 80003aa:	4b4b      	ldr	r3, [pc, #300]	; (80004d8 <getKeyInput+0x180>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d111      	bne.n	80003d6 <getKeyInput+0x7e>
				subKeyProcess1();
 80003b2:	f7ff ffad 	bl	8000310 <subKeyProcess1>
				TimerForKeyPress = 200;
 80003b6:	4b4b      	ldr	r3, [pc, #300]	; (80004e4 <getKeyInput+0x18c>)
 80003b8:	22c8      	movs	r2, #200	; 0xc8
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	e00b      	b.n	80003d6 <getKeyInput+0x7e>
			}
		}
		else{
			TimerForKeyPress--;
 80003be:	4b49      	ldr	r3, [pc, #292]	; (80004e4 <getKeyInput+0x18c>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	4a47      	ldr	r2, [pc, #284]	; (80004e4 <getKeyInput+0x18c>)
 80003c6:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 80003c8:	4b46      	ldr	r3, [pc, #280]	; (80004e4 <getKeyInput+0x18c>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d102      	bne.n	80003d6 <getKeyInput+0x7e>
				KeyReg3 = NORMAL_STATE;
 80003d0:	4b43      	ldr	r3, [pc, #268]	; (80004e0 <getKeyInput+0x188>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	601a      	str	r2, [r3, #0]
			}
		}
	}

	//Code for button2
	KeyReg4 = KeyReg5;
 80003d6:	4b44      	ldr	r3, [pc, #272]	; (80004e8 <getKeyInput+0x190>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a44      	ldr	r2, [pc, #272]	; (80004ec <getKeyInput+0x194>)
 80003dc:	6013      	str	r3, [r2, #0]
	KeyReg5 = KeyReg6;
 80003de:	4b44      	ldr	r3, [pc, #272]	; (80004f0 <getKeyInput+0x198>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a41      	ldr	r2, [pc, #260]	; (80004e8 <getKeyInput+0x190>)
 80003e4:	6013      	str	r3, [r2, #0]
	KeyReg6 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80003e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ea:	483c      	ldr	r0, [pc, #240]	; (80004dc <getKeyInput+0x184>)
 80003ec:	f001 fe6e 	bl	80020cc <HAL_GPIO_ReadPin>
 80003f0:	4603      	mov	r3, r0
 80003f2:	461a      	mov	r2, r3
 80003f4:	4b3e      	ldr	r3, [pc, #248]	; (80004f0 <getKeyInput+0x198>)
 80003f6:	601a      	str	r2, [r3, #0]
	if ((KeyReg4 == KeyReg5) && (KeyReg5 == KeyReg6)){
 80003f8:	4b3c      	ldr	r3, [pc, #240]	; (80004ec <getKeyInput+0x194>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	4b3a      	ldr	r3, [pc, #232]	; (80004e8 <getKeyInput+0x190>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	429a      	cmp	r2, r3
 8000402:	d125      	bne.n	8000450 <getKeyInput+0xf8>
 8000404:	4b38      	ldr	r3, [pc, #224]	; (80004e8 <getKeyInput+0x190>)
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	4b39      	ldr	r3, [pc, #228]	; (80004f0 <getKeyInput+0x198>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	429a      	cmp	r2, r3
 800040e:	d11f      	bne.n	8000450 <getKeyInput+0xf8>
		if(KeyReg7 != KeyReg6){
 8000410:	4b38      	ldr	r3, [pc, #224]	; (80004f4 <getKeyInput+0x19c>)
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	4b36      	ldr	r3, [pc, #216]	; (80004f0 <getKeyInput+0x198>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	429a      	cmp	r2, r3
 800041a:	d00d      	beq.n	8000438 <getKeyInput+0xe0>
			KeyReg7 = KeyReg6;
 800041c:	4b34      	ldr	r3, [pc, #208]	; (80004f0 <getKeyInput+0x198>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a34      	ldr	r2, [pc, #208]	; (80004f4 <getKeyInput+0x19c>)
 8000422:	6013      	str	r3, [r2, #0]
			if(KeyReg6 == PRESSED_STATE){
 8000424:	4b32      	ldr	r3, [pc, #200]	; (80004f0 <getKeyInput+0x198>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d111      	bne.n	8000450 <getKeyInput+0xf8>
				subKeyProcess2();
 800042c:	f7ff ff7c 	bl	8000328 <subKeyProcess2>
				TimerForKeyPress = 200;
 8000430:	4b2c      	ldr	r3, [pc, #176]	; (80004e4 <getKeyInput+0x18c>)
 8000432:	22c8      	movs	r2, #200	; 0xc8
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	e00b      	b.n	8000450 <getKeyInput+0xf8>
			}
		}
		else{
			TimerForKeyPress--;
 8000438:	4b2a      	ldr	r3, [pc, #168]	; (80004e4 <getKeyInput+0x18c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	3b01      	subs	r3, #1
 800043e:	4a29      	ldr	r2, [pc, #164]	; (80004e4 <getKeyInput+0x18c>)
 8000440:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 8000442:	4b28      	ldr	r3, [pc, #160]	; (80004e4 <getKeyInput+0x18c>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d102      	bne.n	8000450 <getKeyInput+0xf8>
				KeyReg7 = NORMAL_STATE;
 800044a:	4b2a      	ldr	r3, [pc, #168]	; (80004f4 <getKeyInput+0x19c>)
 800044c:	2201      	movs	r2, #1
 800044e:	601a      	str	r2, [r3, #0]
			}
		}
	}

	//Code for button3
	KeyReg8 = KeyReg9;
 8000450:	4b29      	ldr	r3, [pc, #164]	; (80004f8 <getKeyInput+0x1a0>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a29      	ldr	r2, [pc, #164]	; (80004fc <getKeyInput+0x1a4>)
 8000456:	6013      	str	r3, [r2, #0]
	KeyReg9 = KeyReg10;
 8000458:	4b29      	ldr	r3, [pc, #164]	; (8000500 <getKeyInput+0x1a8>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a26      	ldr	r2, [pc, #152]	; (80004f8 <getKeyInput+0x1a0>)
 800045e:	6013      	str	r3, [r2, #0]
	KeyReg10 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000460:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000464:	481d      	ldr	r0, [pc, #116]	; (80004dc <getKeyInput+0x184>)
 8000466:	f001 fe31 	bl	80020cc <HAL_GPIO_ReadPin>
 800046a:	4603      	mov	r3, r0
 800046c:	461a      	mov	r2, r3
 800046e:	4b24      	ldr	r3, [pc, #144]	; (8000500 <getKeyInput+0x1a8>)
 8000470:	601a      	str	r2, [r3, #0]
	if ((KeyReg8 == KeyReg9) && (KeyReg9 == KeyReg10)){
 8000472:	4b22      	ldr	r3, [pc, #136]	; (80004fc <getKeyInput+0x1a4>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	4b20      	ldr	r3, [pc, #128]	; (80004f8 <getKeyInput+0x1a0>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	429a      	cmp	r2, r3
 800047c:	d125      	bne.n	80004ca <getKeyInput+0x172>
 800047e:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <getKeyInput+0x1a0>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	4b1f      	ldr	r3, [pc, #124]	; (8000500 <getKeyInput+0x1a8>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	429a      	cmp	r2, r3
 8000488:	d11f      	bne.n	80004ca <getKeyInput+0x172>
		if(KeyReg11 != KeyReg10){
 800048a:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <getKeyInput+0x1ac>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	4b1c      	ldr	r3, [pc, #112]	; (8000500 <getKeyInput+0x1a8>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	429a      	cmp	r2, r3
 8000494:	d00d      	beq.n	80004b2 <getKeyInput+0x15a>
			KeyReg11 = KeyReg10;
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <getKeyInput+0x1a8>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a1a      	ldr	r2, [pc, #104]	; (8000504 <getKeyInput+0x1ac>)
 800049c:	6013      	str	r3, [r2, #0]
			if(KeyReg10 == PRESSED_STATE){
 800049e:	4b18      	ldr	r3, [pc, #96]	; (8000500 <getKeyInput+0x1a8>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d111      	bne.n	80004ca <getKeyInput+0x172>
				subKeyProcess3();
 80004a6:	f7ff ff4b 	bl	8000340 <subKeyProcess3>
				TimerForKeyPress = 200;
 80004aa:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <getKeyInput+0x18c>)
 80004ac:	22c8      	movs	r2, #200	; 0xc8
 80004ae:	601a      	str	r2, [r3, #0]
			if(TimerForKeyPress == 0){
				KeyReg11 = NORMAL_STATE;
			}
		}
	}
}
 80004b0:	e00b      	b.n	80004ca <getKeyInput+0x172>
			TimerForKeyPress--;
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <getKeyInput+0x18c>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	3b01      	subs	r3, #1
 80004b8:	4a0a      	ldr	r2, [pc, #40]	; (80004e4 <getKeyInput+0x18c>)
 80004ba:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 80004bc:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <getKeyInput+0x18c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d102      	bne.n	80004ca <getKeyInput+0x172>
				KeyReg11 = NORMAL_STATE;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <getKeyInput+0x1ac>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	601a      	str	r2, [r3, #0]
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000004 	.word	0x20000004
 80004d4:	20000000 	.word	0x20000000
 80004d8:	20000008 	.word	0x20000008
 80004dc:	40011000 	.word	0x40011000
 80004e0:	2000000c 	.word	0x2000000c
 80004e4:	20000058 	.word	0x20000058
 80004e8:	20000014 	.word	0x20000014
 80004ec:	20000010 	.word	0x20000010
 80004f0:	20000018 	.word	0x20000018
 80004f4:	2000001c 	.word	0x2000001c
 80004f8:	20000024 	.word	0x20000024
 80004fc:	20000020 	.word	0x20000020
 8000500:	20000028 	.word	0x20000028
 8000504:	2000002c 	.word	0x2000002c

08000508 <display7SEG_1>:
 *      Author: HP
 */

#include "display7SEG.h"

void display7SEG_1(int number){
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	if(number == 0){
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d123      	bne.n	800055e <display7SEG_1+0x56>
		HAL_GPIO_WritePin (a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	2101      	movs	r1, #1
 800051a:	48c2      	ldr	r0, [pc, #776]	; (8000824 <display7SEG_1+0x31c>)
 800051c:	f001 fded 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	2102      	movs	r1, #2
 8000524:	48bf      	ldr	r0, [pc, #764]	; (8000824 <display7SEG_1+0x31c>)
 8000526:	f001 fde8 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	2104      	movs	r1, #4
 800052e:	48bd      	ldr	r0, [pc, #756]	; (8000824 <display7SEG_1+0x31c>)
 8000530:	f001 fde3 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	2108      	movs	r1, #8
 8000538:	48ba      	ldr	r0, [pc, #744]	; (8000824 <display7SEG_1+0x31c>)
 800053a:	f001 fdde 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2110      	movs	r1, #16
 8000542:	48b8      	ldr	r0, [pc, #736]	; (8000824 <display7SEG_1+0x31c>)
 8000544:	f001 fdd9 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	2120      	movs	r1, #32
 800054c:	48b5      	ldr	r0, [pc, #724]	; (8000824 <display7SEG_1+0x31c>)
 800054e:	f001 fdd4 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 8000552:	2201      	movs	r2, #1
 8000554:	2140      	movs	r1, #64	; 0x40
 8000556:	48b3      	ldr	r0, [pc, #716]	; (8000824 <display7SEG_1+0x31c>)
 8000558:	f001 fdcf 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin (e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin (f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin (g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
	}
}
 800055c:	e15d      	b.n	800081a <display7SEG_1+0x312>
	else if(number == 1){
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d123      	bne.n	80005ac <display7SEG_1+0xa4>
		HAL_GPIO_WritePin (a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2101      	movs	r1, #1
 8000568:	48ae      	ldr	r0, [pc, #696]	; (8000824 <display7SEG_1+0x31c>)
 800056a:	f001 fdc6 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	2102      	movs	r1, #2
 8000572:	48ac      	ldr	r0, [pc, #688]	; (8000824 <display7SEG_1+0x31c>)
 8000574:	f001 fdc1 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2104      	movs	r1, #4
 800057c:	48a9      	ldr	r0, [pc, #676]	; (8000824 <display7SEG_1+0x31c>)
 800057e:	f001 fdbc 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	2108      	movs	r1, #8
 8000586:	48a7      	ldr	r0, [pc, #668]	; (8000824 <display7SEG_1+0x31c>)
 8000588:	f001 fdb7 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2110      	movs	r1, #16
 8000590:	48a4      	ldr	r0, [pc, #656]	; (8000824 <display7SEG_1+0x31c>)
 8000592:	f001 fdb2 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 8000596:	2201      	movs	r2, #1
 8000598:	2120      	movs	r1, #32
 800059a:	48a2      	ldr	r0, [pc, #648]	; (8000824 <display7SEG_1+0x31c>)
 800059c:	f001 fdad 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2140      	movs	r1, #64	; 0x40
 80005a4:	489f      	ldr	r0, [pc, #636]	; (8000824 <display7SEG_1+0x31c>)
 80005a6:	f001 fda8 	bl	80020fa <HAL_GPIO_WritePin>
}
 80005aa:	e136      	b.n	800081a <display7SEG_1+0x312>
	else if (number == 2){
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d123      	bne.n	80005fa <display7SEG_1+0xf2>
		HAL_GPIO_WritePin (a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2101      	movs	r1, #1
 80005b6:	489b      	ldr	r0, [pc, #620]	; (8000824 <display7SEG_1+0x31c>)
 80005b8:	f001 fd9f 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2102      	movs	r1, #2
 80005c0:	4898      	ldr	r0, [pc, #608]	; (8000824 <display7SEG_1+0x31c>)
 80005c2:	f001 fd9a 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (c1_GPIO_Port, c1_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2104      	movs	r1, #4
 80005ca:	4896      	ldr	r0, [pc, #600]	; (8000824 <display7SEG_1+0x31c>)
 80005cc:	f001 fd95 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2108      	movs	r1, #8
 80005d4:	4893      	ldr	r0, [pc, #588]	; (8000824 <display7SEG_1+0x31c>)
 80005d6:	f001 fd90 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2110      	movs	r1, #16
 80005de:	4891      	ldr	r0, [pc, #580]	; (8000824 <display7SEG_1+0x31c>)
 80005e0:	f001 fd8b 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2120      	movs	r1, #32
 80005e8:	488e      	ldr	r0, [pc, #568]	; (8000824 <display7SEG_1+0x31c>)
 80005ea:	f001 fd86 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2140      	movs	r1, #64	; 0x40
 80005f2:	488c      	ldr	r0, [pc, #560]	; (8000824 <display7SEG_1+0x31c>)
 80005f4:	f001 fd81 	bl	80020fa <HAL_GPIO_WritePin>
}
 80005f8:	e10f      	b.n	800081a <display7SEG_1+0x312>
	else if (number == 3){
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	d123      	bne.n	8000648 <display7SEG_1+0x140>
		HAL_GPIO_WritePin (a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2101      	movs	r1, #1
 8000604:	4887      	ldr	r0, [pc, #540]	; (8000824 <display7SEG_1+0x31c>)
 8000606:	f001 fd78 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2102      	movs	r1, #2
 800060e:	4885      	ldr	r0, [pc, #532]	; (8000824 <display7SEG_1+0x31c>)
 8000610:	f001 fd73 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2104      	movs	r1, #4
 8000618:	4882      	ldr	r0, [pc, #520]	; (8000824 <display7SEG_1+0x31c>)
 800061a:	f001 fd6e 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2108      	movs	r1, #8
 8000622:	4880      	ldr	r0, [pc, #512]	; (8000824 <display7SEG_1+0x31c>)
 8000624:	f001 fd69 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2110      	movs	r1, #16
 800062c:	487d      	ldr	r0, [pc, #500]	; (8000824 <display7SEG_1+0x31c>)
 800062e:	f001 fd64 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2120      	movs	r1, #32
 8000636:	487b      	ldr	r0, [pc, #492]	; (8000824 <display7SEG_1+0x31c>)
 8000638:	f001 fd5f 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2140      	movs	r1, #64	; 0x40
 8000640:	4878      	ldr	r0, [pc, #480]	; (8000824 <display7SEG_1+0x31c>)
 8000642:	f001 fd5a 	bl	80020fa <HAL_GPIO_WritePin>
}
 8000646:	e0e8      	b.n	800081a <display7SEG_1+0x312>
	else if (number == 4){
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b04      	cmp	r3, #4
 800064c:	d123      	bne.n	8000696 <display7SEG_1+0x18e>
		HAL_GPIO_WritePin (a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	2101      	movs	r1, #1
 8000652:	4874      	ldr	r0, [pc, #464]	; (8000824 <display7SEG_1+0x31c>)
 8000654:	f001 fd51 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2102      	movs	r1, #2
 800065c:	4871      	ldr	r0, [pc, #452]	; (8000824 <display7SEG_1+0x31c>)
 800065e:	f001 fd4c 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2104      	movs	r1, #4
 8000666:	486f      	ldr	r0, [pc, #444]	; (8000824 <display7SEG_1+0x31c>)
 8000668:	f001 fd47 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2108      	movs	r1, #8
 8000670:	486c      	ldr	r0, [pc, #432]	; (8000824 <display7SEG_1+0x31c>)
 8000672:	f001 fd42 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000676:	2201      	movs	r2, #1
 8000678:	2110      	movs	r1, #16
 800067a:	486a      	ldr	r0, [pc, #424]	; (8000824 <display7SEG_1+0x31c>)
 800067c:	f001 fd3d 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	2120      	movs	r1, #32
 8000684:	4867      	ldr	r0, [pc, #412]	; (8000824 <display7SEG_1+0x31c>)
 8000686:	f001 fd38 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2140      	movs	r1, #64	; 0x40
 800068e:	4865      	ldr	r0, [pc, #404]	; (8000824 <display7SEG_1+0x31c>)
 8000690:	f001 fd33 	bl	80020fa <HAL_GPIO_WritePin>
}
 8000694:	e0c1      	b.n	800081a <display7SEG_1+0x312>
	else if (number == 5){
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b05      	cmp	r3, #5
 800069a:	d123      	bne.n	80006e4 <display7SEG_1+0x1dc>
		HAL_GPIO_WritePin (a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	2101      	movs	r1, #1
 80006a0:	4860      	ldr	r0, [pc, #384]	; (8000824 <display7SEG_1+0x31c>)
 80006a2:	f001 fd2a 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2102      	movs	r1, #2
 80006aa:	485e      	ldr	r0, [pc, #376]	; (8000824 <display7SEG_1+0x31c>)
 80006ac:	f001 fd25 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2104      	movs	r1, #4
 80006b4:	485b      	ldr	r0, [pc, #364]	; (8000824 <display7SEG_1+0x31c>)
 80006b6:	f001 fd20 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2108      	movs	r1, #8
 80006be:	4859      	ldr	r0, [pc, #356]	; (8000824 <display7SEG_1+0x31c>)
 80006c0:	f001 fd1b 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2110      	movs	r1, #16
 80006c8:	4856      	ldr	r0, [pc, #344]	; (8000824 <display7SEG_1+0x31c>)
 80006ca:	f001 fd16 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2120      	movs	r1, #32
 80006d2:	4854      	ldr	r0, [pc, #336]	; (8000824 <display7SEG_1+0x31c>)
 80006d4:	f001 fd11 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2140      	movs	r1, #64	; 0x40
 80006dc:	4851      	ldr	r0, [pc, #324]	; (8000824 <display7SEG_1+0x31c>)
 80006de:	f001 fd0c 	bl	80020fa <HAL_GPIO_WritePin>
}
 80006e2:	e09a      	b.n	800081a <display7SEG_1+0x312>
	else if (number == 6){
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b06      	cmp	r3, #6
 80006e8:	d123      	bne.n	8000732 <display7SEG_1+0x22a>
		HAL_GPIO_WritePin (a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	484d      	ldr	r0, [pc, #308]	; (8000824 <display7SEG_1+0x31c>)
 80006f0:	f001 fd03 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2102      	movs	r1, #2
 80006f8:	484a      	ldr	r0, [pc, #296]	; (8000824 <display7SEG_1+0x31c>)
 80006fa:	f001 fcfe 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2104      	movs	r1, #4
 8000702:	4848      	ldr	r0, [pc, #288]	; (8000824 <display7SEG_1+0x31c>)
 8000704:	f001 fcf9 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2108      	movs	r1, #8
 800070c:	4845      	ldr	r0, [pc, #276]	; (8000824 <display7SEG_1+0x31c>)
 800070e:	f001 fcf4 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2110      	movs	r1, #16
 8000716:	4843      	ldr	r0, [pc, #268]	; (8000824 <display7SEG_1+0x31c>)
 8000718:	f001 fcef 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	2120      	movs	r1, #32
 8000720:	4840      	ldr	r0, [pc, #256]	; (8000824 <display7SEG_1+0x31c>)
 8000722:	f001 fcea 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2140      	movs	r1, #64	; 0x40
 800072a:	483e      	ldr	r0, [pc, #248]	; (8000824 <display7SEG_1+0x31c>)
 800072c:	f001 fce5 	bl	80020fa <HAL_GPIO_WritePin>
}
 8000730:	e073      	b.n	800081a <display7SEG_1+0x312>
	else if (number == 7){
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b07      	cmp	r3, #7
 8000736:	d123      	bne.n	8000780 <display7SEG_1+0x278>
		HAL_GPIO_WritePin (a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2101      	movs	r1, #1
 800073c:	4839      	ldr	r0, [pc, #228]	; (8000824 <display7SEG_1+0x31c>)
 800073e:	f001 fcdc 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2102      	movs	r1, #2
 8000746:	4837      	ldr	r0, [pc, #220]	; (8000824 <display7SEG_1+0x31c>)
 8000748:	f001 fcd7 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2104      	movs	r1, #4
 8000750:	4834      	ldr	r0, [pc, #208]	; (8000824 <display7SEG_1+0x31c>)
 8000752:	f001 fcd2 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	2108      	movs	r1, #8
 800075a:	4832      	ldr	r0, [pc, #200]	; (8000824 <display7SEG_1+0x31c>)
 800075c:	f001 fccd 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2110      	movs	r1, #16
 8000764:	482f      	ldr	r0, [pc, #188]	; (8000824 <display7SEG_1+0x31c>)
 8000766:	f001 fcc8 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	2120      	movs	r1, #32
 800076e:	482d      	ldr	r0, [pc, #180]	; (8000824 <display7SEG_1+0x31c>)
 8000770:	f001 fcc3 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2140      	movs	r1, #64	; 0x40
 8000778:	482a      	ldr	r0, [pc, #168]	; (8000824 <display7SEG_1+0x31c>)
 800077a:	f001 fcbe 	bl	80020fa <HAL_GPIO_WritePin>
}
 800077e:	e04c      	b.n	800081a <display7SEG_1+0x312>
	else if (number == 8){
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b08      	cmp	r3, #8
 8000784:	d123      	bne.n	80007ce <display7SEG_1+0x2c6>
		HAL_GPIO_WritePin (a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2101      	movs	r1, #1
 800078a:	4826      	ldr	r0, [pc, #152]	; (8000824 <display7SEG_1+0x31c>)
 800078c:	f001 fcb5 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2102      	movs	r1, #2
 8000794:	4823      	ldr	r0, [pc, #140]	; (8000824 <display7SEG_1+0x31c>)
 8000796:	f001 fcb0 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2104      	movs	r1, #4
 800079e:	4821      	ldr	r0, [pc, #132]	; (8000824 <display7SEG_1+0x31c>)
 80007a0:	f001 fcab 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2108      	movs	r1, #8
 80007a8:	481e      	ldr	r0, [pc, #120]	; (8000824 <display7SEG_1+0x31c>)
 80007aa:	f001 fca6 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2110      	movs	r1, #16
 80007b2:	481c      	ldr	r0, [pc, #112]	; (8000824 <display7SEG_1+0x31c>)
 80007b4:	f001 fca1 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2120      	movs	r1, #32
 80007bc:	4819      	ldr	r0, [pc, #100]	; (8000824 <display7SEG_1+0x31c>)
 80007be:	f001 fc9c 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2140      	movs	r1, #64	; 0x40
 80007c6:	4817      	ldr	r0, [pc, #92]	; (8000824 <display7SEG_1+0x31c>)
 80007c8:	f001 fc97 	bl	80020fa <HAL_GPIO_WritePin>
}
 80007cc:	e025      	b.n	800081a <display7SEG_1+0x312>
	else if (number == 9){
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b09      	cmp	r3, #9
 80007d2:	d122      	bne.n	800081a <display7SEG_1+0x312>
		HAL_GPIO_WritePin (a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2101      	movs	r1, #1
 80007d8:	4812      	ldr	r0, [pc, #72]	; (8000824 <display7SEG_1+0x31c>)
 80007da:	f001 fc8e 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2102      	movs	r1, #2
 80007e2:	4810      	ldr	r0, [pc, #64]	; (8000824 <display7SEG_1+0x31c>)
 80007e4:	f001 fc89 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2104      	movs	r1, #4
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <display7SEG_1+0x31c>)
 80007ee:	f001 fc84 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2108      	movs	r1, #8
 80007f6:	480b      	ldr	r0, [pc, #44]	; (8000824 <display7SEG_1+0x31c>)
 80007f8:	f001 fc7f 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2110      	movs	r1, #16
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <display7SEG_1+0x31c>)
 8000802:	f001 fc7a 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2120      	movs	r1, #32
 800080a:	4806      	ldr	r0, [pc, #24]	; (8000824 <display7SEG_1+0x31c>)
 800080c:	f001 fc75 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2140      	movs	r1, #64	; 0x40
 8000814:	4803      	ldr	r0, [pc, #12]	; (8000824 <display7SEG_1+0x31c>)
 8000816:	f001 fc70 	bl	80020fa <HAL_GPIO_WritePin>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40010c00 	.word	0x40010c00

08000828 <display7SEG_2>:

void display7SEG_2(int number){
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	if(number == 0){
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d129      	bne.n	800088a <display7SEG_2+0x62>
		HAL_GPIO_WritePin (a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2180      	movs	r1, #128	; 0x80
 800083a:	48c8      	ldr	r0, [pc, #800]	; (8000b5c <display7SEG_2+0x334>)
 800083c:	f001 fc5d 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000846:	48c5      	ldr	r0, [pc, #788]	; (8000b5c <display7SEG_2+0x334>)
 8000848:	f001 fc57 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000852:	48c2      	ldr	r0, [pc, #776]	; (8000b5c <display7SEG_2+0x334>)
 8000854:	f001 fc51 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085e:	48bf      	ldr	r0, [pc, #764]	; (8000b5c <display7SEG_2+0x334>)
 8000860:	f001 fc4b 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800086a:	48bc      	ldr	r0, [pc, #752]	; (8000b5c <display7SEG_2+0x334>)
 800086c:	f001 fc45 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000876:	48b9      	ldr	r0, [pc, #740]	; (8000b5c <display7SEG_2+0x334>)
 8000878:	f001 fc3f 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000882:	48b6      	ldr	r0, [pc, #728]	; (8000b5c <display7SEG_2+0x334>)
 8000884:	f001 fc39 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin (e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin (f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin (g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
	}
}
 8000888:	e196      	b.n	8000bb8 <display7SEG_2+0x390>
	else if(number == 1){
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d129      	bne.n	80008e4 <display7SEG_2+0xbc>
		HAL_GPIO_WritePin (a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2180      	movs	r1, #128	; 0x80
 8000894:	48b1      	ldr	r0, [pc, #708]	; (8000b5c <display7SEG_2+0x334>)
 8000896:	f001 fc30 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a0:	48ae      	ldr	r0, [pc, #696]	; (8000b5c <display7SEG_2+0x334>)
 80008a2:	f001 fc2a 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ac:	48ab      	ldr	r0, [pc, #684]	; (8000b5c <display7SEG_2+0x334>)
 80008ae:	f001 fc24 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b8:	48a8      	ldr	r0, [pc, #672]	; (8000b5c <display7SEG_2+0x334>)
 80008ba:	f001 fc1e 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008c4:	48a5      	ldr	r0, [pc, #660]	; (8000b5c <display7SEG_2+0x334>)
 80008c6:	f001 fc18 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d0:	48a2      	ldr	r0, [pc, #648]	; (8000b5c <display7SEG_2+0x334>)
 80008d2:	f001 fc12 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 80008d6:	2201      	movs	r2, #1
 80008d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008dc:	489f      	ldr	r0, [pc, #636]	; (8000b5c <display7SEG_2+0x334>)
 80008de:	f001 fc0c 	bl	80020fa <HAL_GPIO_WritePin>
}
 80008e2:	e169      	b.n	8000bb8 <display7SEG_2+0x390>
	else if (number == 2){
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d129      	bne.n	800093e <display7SEG_2+0x116>
		HAL_GPIO_WritePin (a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	489b      	ldr	r0, [pc, #620]	; (8000b5c <display7SEG_2+0x334>)
 80008f0:	f001 fc03 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008fa:	4898      	ldr	r0, [pc, #608]	; (8000b5c <display7SEG_2+0x334>)
 80008fc:	f001 fbfd 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (c2_GPIO_Port, c2_Pin, GPIO_PIN_SET);
 8000900:	2201      	movs	r2, #1
 8000902:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000906:	4895      	ldr	r0, [pc, #596]	; (8000b5c <display7SEG_2+0x334>)
 8000908:	f001 fbf7 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000912:	4892      	ldr	r0, [pc, #584]	; (8000b5c <display7SEG_2+0x334>)
 8000914:	f001 fbf1 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800091e:	488f      	ldr	r0, [pc, #572]	; (8000b5c <display7SEG_2+0x334>)
 8000920:	f001 fbeb 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092a:	488c      	ldr	r0, [pc, #560]	; (8000b5c <display7SEG_2+0x334>)
 800092c:	f001 fbe5 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000936:	4889      	ldr	r0, [pc, #548]	; (8000b5c <display7SEG_2+0x334>)
 8000938:	f001 fbdf 	bl	80020fa <HAL_GPIO_WritePin>
}
 800093c:	e13c      	b.n	8000bb8 <display7SEG_2+0x390>
	else if (number == 3){
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b03      	cmp	r3, #3
 8000942:	d129      	bne.n	8000998 <display7SEG_2+0x170>
		HAL_GPIO_WritePin (a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2180      	movs	r1, #128	; 0x80
 8000948:	4884      	ldr	r0, [pc, #528]	; (8000b5c <display7SEG_2+0x334>)
 800094a:	f001 fbd6 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000954:	4881      	ldr	r0, [pc, #516]	; (8000b5c <display7SEG_2+0x334>)
 8000956:	f001 fbd0 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000960:	487e      	ldr	r0, [pc, #504]	; (8000b5c <display7SEG_2+0x334>)
 8000962:	f001 fbca 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800096c:	487b      	ldr	r0, [pc, #492]	; (8000b5c <display7SEG_2+0x334>)
 800096e:	f001 fbc4 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000972:	2201      	movs	r2, #1
 8000974:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000978:	4878      	ldr	r0, [pc, #480]	; (8000b5c <display7SEG_2+0x334>)
 800097a:	f001 fbbe 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000984:	4875      	ldr	r0, [pc, #468]	; (8000b5c <display7SEG_2+0x334>)
 8000986:	f001 fbb8 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000990:	4872      	ldr	r0, [pc, #456]	; (8000b5c <display7SEG_2+0x334>)
 8000992:	f001 fbb2 	bl	80020fa <HAL_GPIO_WritePin>
}
 8000996:	e10f      	b.n	8000bb8 <display7SEG_2+0x390>
	else if (number == 4){
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b04      	cmp	r3, #4
 800099c:	d129      	bne.n	80009f2 <display7SEG_2+0x1ca>
		HAL_GPIO_WritePin (a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	2180      	movs	r1, #128	; 0x80
 80009a2:	486e      	ldr	r0, [pc, #440]	; (8000b5c <display7SEG_2+0x334>)
 80009a4:	f001 fba9 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ae:	486b      	ldr	r0, [pc, #428]	; (8000b5c <display7SEG_2+0x334>)
 80009b0:	f001 fba3 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ba:	4868      	ldr	r0, [pc, #416]	; (8000b5c <display7SEG_2+0x334>)
 80009bc:	f001 fb9d 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c6:	4865      	ldr	r0, [pc, #404]	; (8000b5c <display7SEG_2+0x334>)
 80009c8:	f001 fb97 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d2:	4862      	ldr	r0, [pc, #392]	; (8000b5c <display7SEG_2+0x334>)
 80009d4:	f001 fb91 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009de:	485f      	ldr	r0, [pc, #380]	; (8000b5c <display7SEG_2+0x334>)
 80009e0:	f001 fb8b 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ea:	485c      	ldr	r0, [pc, #368]	; (8000b5c <display7SEG_2+0x334>)
 80009ec:	f001 fb85 	bl	80020fa <HAL_GPIO_WritePin>
}
 80009f0:	e0e2      	b.n	8000bb8 <display7SEG_2+0x390>
	else if (number == 5){
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b05      	cmp	r3, #5
 80009f6:	d129      	bne.n	8000a4c <display7SEG_2+0x224>
		HAL_GPIO_WritePin (a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2180      	movs	r1, #128	; 0x80
 80009fc:	4857      	ldr	r0, [pc, #348]	; (8000b5c <display7SEG_2+0x334>)
 80009fe:	f001 fb7c 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a08:	4854      	ldr	r0, [pc, #336]	; (8000b5c <display7SEG_2+0x334>)
 8000a0a:	f001 fb76 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a14:	4851      	ldr	r0, [pc, #324]	; (8000b5c <display7SEG_2+0x334>)
 8000a16:	f001 fb70 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a20:	484e      	ldr	r0, [pc, #312]	; (8000b5c <display7SEG_2+0x334>)
 8000a22:	f001 fb6a 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a2c:	484b      	ldr	r0, [pc, #300]	; (8000b5c <display7SEG_2+0x334>)
 8000a2e:	f001 fb64 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a38:	4848      	ldr	r0, [pc, #288]	; (8000b5c <display7SEG_2+0x334>)
 8000a3a:	f001 fb5e 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a44:	4845      	ldr	r0, [pc, #276]	; (8000b5c <display7SEG_2+0x334>)
 8000a46:	f001 fb58 	bl	80020fa <HAL_GPIO_WritePin>
}
 8000a4a:	e0b5      	b.n	8000bb8 <display7SEG_2+0x390>
	else if (number == 6){
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b06      	cmp	r3, #6
 8000a50:	d129      	bne.n	8000aa6 <display7SEG_2+0x27e>
		HAL_GPIO_WritePin (a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2180      	movs	r1, #128	; 0x80
 8000a56:	4841      	ldr	r0, [pc, #260]	; (8000b5c <display7SEG_2+0x334>)
 8000a58:	f001 fb4f 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a62:	483e      	ldr	r0, [pc, #248]	; (8000b5c <display7SEG_2+0x334>)
 8000a64:	f001 fb49 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6e:	483b      	ldr	r0, [pc, #236]	; (8000b5c <display7SEG_2+0x334>)
 8000a70:	f001 fb43 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7a:	4838      	ldr	r0, [pc, #224]	; (8000b5c <display7SEG_2+0x334>)
 8000a7c:	f001 fb3d 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a86:	4835      	ldr	r0, [pc, #212]	; (8000b5c <display7SEG_2+0x334>)
 8000a88:	f001 fb37 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a92:	4832      	ldr	r0, [pc, #200]	; (8000b5c <display7SEG_2+0x334>)
 8000a94:	f001 fb31 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9e:	482f      	ldr	r0, [pc, #188]	; (8000b5c <display7SEG_2+0x334>)
 8000aa0:	f001 fb2b 	bl	80020fa <HAL_GPIO_WritePin>
}
 8000aa4:	e088      	b.n	8000bb8 <display7SEG_2+0x390>
	else if (number == 7){
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b07      	cmp	r3, #7
 8000aaa:	d129      	bne.n	8000b00 <display7SEG_2+0x2d8>
		HAL_GPIO_WritePin (a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2180      	movs	r1, #128	; 0x80
 8000ab0:	482a      	ldr	r0, [pc, #168]	; (8000b5c <display7SEG_2+0x334>)
 8000ab2:	f001 fb22 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000abc:	4827      	ldr	r0, [pc, #156]	; (8000b5c <display7SEG_2+0x334>)
 8000abe:	f001 fb1c 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac8:	4824      	ldr	r0, [pc, #144]	; (8000b5c <display7SEG_2+0x334>)
 8000aca:	f001 fb16 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad4:	4821      	ldr	r0, [pc, #132]	; (8000b5c <display7SEG_2+0x334>)
 8000ad6:	f001 fb10 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae0:	481e      	ldr	r0, [pc, #120]	; (8000b5c <display7SEG_2+0x334>)
 8000ae2:	f001 fb0a 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aec:	481b      	ldr	r0, [pc, #108]	; (8000b5c <display7SEG_2+0x334>)
 8000aee:	f001 fb04 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af8:	4818      	ldr	r0, [pc, #96]	; (8000b5c <display7SEG_2+0x334>)
 8000afa:	f001 fafe 	bl	80020fa <HAL_GPIO_WritePin>
}
 8000afe:	e05b      	b.n	8000bb8 <display7SEG_2+0x390>
	else if (number == 8){
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b08      	cmp	r3, #8
 8000b04:	d12c      	bne.n	8000b60 <display7SEG_2+0x338>
		HAL_GPIO_WritePin (a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2180      	movs	r1, #128	; 0x80
 8000b0a:	4814      	ldr	r0, [pc, #80]	; (8000b5c <display7SEG_2+0x334>)
 8000b0c:	f001 faf5 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b16:	4811      	ldr	r0, [pc, #68]	; (8000b5c <display7SEG_2+0x334>)
 8000b18:	f001 faef 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b22:	480e      	ldr	r0, [pc, #56]	; (8000b5c <display7SEG_2+0x334>)
 8000b24:	f001 fae9 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b2e:	480b      	ldr	r0, [pc, #44]	; (8000b5c <display7SEG_2+0x334>)
 8000b30:	f001 fae3 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b3a:	4808      	ldr	r0, [pc, #32]	; (8000b5c <display7SEG_2+0x334>)
 8000b3c:	f001 fadd 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <display7SEG_2+0x334>)
 8000b48:	f001 fad7 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b52:	4802      	ldr	r0, [pc, #8]	; (8000b5c <display7SEG_2+0x334>)
 8000b54:	f001 fad1 	bl	80020fa <HAL_GPIO_WritePin>
}
 8000b58:	e02e      	b.n	8000bb8 <display7SEG_2+0x390>
 8000b5a:	bf00      	nop
 8000b5c:	40010c00 	.word	0x40010c00
	else if (number == 9){
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b09      	cmp	r3, #9
 8000b64:	d128      	bne.n	8000bb8 <display7SEG_2+0x390>
		HAL_GPIO_WritePin (a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2180      	movs	r1, #128	; 0x80
 8000b6a:	4815      	ldr	r0, [pc, #84]	; (8000bc0 <display7SEG_2+0x398>)
 8000b6c:	f001 fac5 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b76:	4812      	ldr	r0, [pc, #72]	; (8000bc0 <display7SEG_2+0x398>)
 8000b78:	f001 fabf 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b82:	480f      	ldr	r0, [pc, #60]	; (8000bc0 <display7SEG_2+0x398>)
 8000b84:	f001 fab9 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b8e:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <display7SEG_2+0x398>)
 8000b90:	f001 fab3 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b9a:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <display7SEG_2+0x398>)
 8000b9c:	f001 faad 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba6:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <display7SEG_2+0x398>)
 8000ba8:	f001 faa7 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb2:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <display7SEG_2+0x398>)
 8000bb4:	f001 faa1 	bl	80020fa <HAL_GPIO_WritePin>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40010c00 	.word	0x40010c00

08000bc4 <update7SEG1forMode234>:

void update7SEG1forMode234(int value7SEG1, int value7SEG2){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
	switch(index_7SEG){
 8000bce:	4b44      	ldr	r3, [pc, #272]	; (8000ce0 <update7SEG1forMode234+0x11c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d04a      	beq.n	8000c6c <update7SEG1forMode234+0xa8>
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	dc78      	bgt.n	8000ccc <update7SEG1forMode234+0x108>
 8000bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bde:	d002      	beq.n	8000be6 <update7SEG1forMode234+0x22>
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d013      	beq.n	8000c0c <update7SEG1forMode234+0x48>
			setTimer3(100);
		}
		// Display EN2 7SEG
		break;
	default:
		break;
 8000be4:	e072      	b.n	8000ccc <update7SEG1forMode234+0x108>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bec:	483d      	ldr	r0, [pc, #244]	; (8000ce4 <update7SEG1forMode234+0x120>)
 8000bee:	f001 fa84 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bf8:	483a      	ldr	r0, [pc, #232]	; (8000ce4 <update7SEG1forMode234+0x120>)
 8000bfa:	f001 fa7e 	bl	80020fa <HAL_GPIO_WritePin>
		index_7SEG = 0;
 8000bfe:	4b38      	ldr	r3, [pc, #224]	; (8000ce0 <update7SEG1forMode234+0x11c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
		setTimer3(100);
 8000c04:	2064      	movs	r0, #100	; 0x64
 8000c06:	f000 fe1d 	bl	8001844 <setTimer3>
		break;
 8000c0a:	e064      	b.n	8000cd6 <update7SEG1forMode234+0x112>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c12:	4834      	ldr	r0, [pc, #208]	; (8000ce4 <update7SEG1forMode234+0x120>)
 8000c14:	f001 fa71 	bl	80020fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c1e:	4831      	ldr	r0, [pc, #196]	; (8000ce4 <update7SEG1forMode234+0x120>)
 8000c20:	f001 fa6b 	bl	80020fa <HAL_GPIO_WritePin>
			display7SEG_1(value7SEG1 / 10);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a30      	ldr	r2, [pc, #192]	; (8000ce8 <update7SEG1forMode234+0x124>)
 8000c28:	fb82 1203 	smull	r1, r2, r2, r3
 8000c2c:	1092      	asrs	r2, r2, #2
 8000c2e:	17db      	asrs	r3, r3, #31
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fc68 	bl	8000508 <display7SEG_1>
			display7SEG_2(value7SEG1 % 10);
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <update7SEG1forMode234+0x124>)
 8000c3c:	fb83 1302 	smull	r1, r3, r3, r2
 8000c40:	1099      	asrs	r1, r3, #2
 8000c42:	17d3      	asrs	r3, r2, #31
 8000c44:	1ac9      	subs	r1, r1, r3
 8000c46:	460b      	mov	r3, r1
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	1ad1      	subs	r1, r2, r3
 8000c50:	4608      	mov	r0, r1
 8000c52:	f7ff fde9 	bl	8000828 <display7SEG_2>
		if(timer3_flag == 1){
 8000c56:	4b25      	ldr	r3, [pc, #148]	; (8000cec <update7SEG1forMode234+0x128>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d138      	bne.n	8000cd0 <update7SEG1forMode234+0x10c>
			index_7SEG = 1;
 8000c5e:	4b20      	ldr	r3, [pc, #128]	; (8000ce0 <update7SEG1forMode234+0x11c>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	601a      	str	r2, [r3, #0]
			setTimer3(100);
 8000c64:	2064      	movs	r0, #100	; 0x64
 8000c66:	f000 fded 	bl	8001844 <setTimer3>
		break;
 8000c6a:	e031      	b.n	8000cd0 <update7SEG1forMode234+0x10c>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c72:	481c      	ldr	r0, [pc, #112]	; (8000ce4 <update7SEG1forMode234+0x120>)
 8000c74:	f001 fa41 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c7e:	4819      	ldr	r0, [pc, #100]	; (8000ce4 <update7SEG1forMode234+0x120>)
 8000c80:	f001 fa3b 	bl	80020fa <HAL_GPIO_WritePin>
		display7SEG_1(value7SEG2 / 10);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	4a18      	ldr	r2, [pc, #96]	; (8000ce8 <update7SEG1forMode234+0x124>)
 8000c88:	fb82 1203 	smull	r1, r2, r2, r3
 8000c8c:	1092      	asrs	r2, r2, #2
 8000c8e:	17db      	asrs	r3, r3, #31
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fc38 	bl	8000508 <display7SEG_1>
		display7SEG_2(value7SEG2 % 10);
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <update7SEG1forMode234+0x124>)
 8000c9c:	fb83 1302 	smull	r1, r3, r3, r2
 8000ca0:	1099      	asrs	r1, r3, #2
 8000ca2:	17d3      	asrs	r3, r2, #31
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	440b      	add	r3, r1
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	1ad1      	subs	r1, r2, r3
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	f7ff fdb9 	bl	8000828 <display7SEG_2>
		if(timer3_flag == 1){
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <update7SEG1forMode234+0x128>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d10a      	bne.n	8000cd4 <update7SEG1forMode234+0x110>
			index_7SEG = 0;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <update7SEG1forMode234+0x11c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
			setTimer3(100);
 8000cc4:	2064      	movs	r0, #100	; 0x64
 8000cc6:	f000 fdbd 	bl	8001844 <setTimer3>
		break;
 8000cca:	e003      	b.n	8000cd4 <update7SEG1forMode234+0x110>
		break;
 8000ccc:	bf00      	nop
 8000cce:	e002      	b.n	8000cd6 <update7SEG1forMode234+0x112>
		break;
 8000cd0:	bf00      	nop
 8000cd2:	e000      	b.n	8000cd6 <update7SEG1forMode234+0x112>
		break;
 8000cd4:	bf00      	nop
	}
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000030 	.word	0x20000030
 8000ce4:	40010800 	.word	0x40010800
 8000ce8:	66666667 	.word	0x66666667
 8000cec:	200000c4 	.word	0x200000c4

08000cf0 <traffic_time>:

void traffic_time(int value1, int value2){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
	switch(index_traffic){
 8000cfa:	4b7f      	ldr	r3, [pc, #508]	; (8000ef8 <traffic_time+0x208>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	f000 8086 	beq.w	8000e10 <traffic_time+0x120>
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	f300 80ed 	bgt.w	8000ee4 <traffic_time+0x1f4>
 8000d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0e:	d002      	beq.n	8000d16 <traffic_time+0x26>
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d013      	beq.n	8000d3c <traffic_time+0x4c>
			index_traffic = 0;
			setTimer5(100);
		}
		break;
	default:
		break;
 8000d14:	e0e6      	b.n	8000ee4 <traffic_time+0x1f4>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d1c:	4877      	ldr	r0, [pc, #476]	; (8000efc <traffic_time+0x20c>)
 8000d1e:	f001 f9ec 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d28:	4874      	ldr	r0, [pc, #464]	; (8000efc <traffic_time+0x20c>)
 8000d2a:	f001 f9e6 	bl	80020fa <HAL_GPIO_WritePin>
		index_traffic = 0;
 8000d2e:	4b72      	ldr	r3, [pc, #456]	; (8000ef8 <traffic_time+0x208>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
		setTimer5(100);
 8000d34:	2064      	movs	r0, #100	; 0x64
 8000d36:	f000 fdad 	bl	8001894 <setTimer5>
		break;
 8000d3a:	e0d8      	b.n	8000eee <traffic_time+0x1fe>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d42:	486e      	ldr	r0, [pc, #440]	; (8000efc <traffic_time+0x20c>)
 8000d44:	f001 f9d9 	bl	80020fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d4e:	486b      	ldr	r0, [pc, #428]	; (8000efc <traffic_time+0x20c>)
 8000d50:	f001 f9d3 	bl	80020fa <HAL_GPIO_WritePin>
			display7SEG_1(value1 / 10);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a6a      	ldr	r2, [pc, #424]	; (8000f00 <traffic_time+0x210>)
 8000d58:	fb82 1203 	smull	r1, r2, r2, r3
 8000d5c:	1092      	asrs	r2, r2, #2
 8000d5e:	17db      	asrs	r3, r3, #31
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fbd0 	bl	8000508 <display7SEG_1>
			display7SEG_2(value1 % 10);
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	4b65      	ldr	r3, [pc, #404]	; (8000f00 <traffic_time+0x210>)
 8000d6c:	fb83 1302 	smull	r1, r3, r3, r2
 8000d70:	1099      	asrs	r1, r3, #2
 8000d72:	17d3      	asrs	r3, r2, #31
 8000d74:	1ac9      	subs	r1, r1, r3
 8000d76:	460b      	mov	r3, r1
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	1ad1      	subs	r1, r2, r3
 8000d80:	4608      	mov	r0, r1
 8000d82:	f7ff fd51 	bl	8000828 <display7SEG_2>
	  		if(counter1 <= 0){
 8000d86:	4b5f      	ldr	r3, [pc, #380]	; (8000f04 <traffic_time+0x214>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	dc2b      	bgt.n	8000de6 <traffic_time+0xf6>
				if(status1 == RED1){
 8000d8e:	4b5e      	ldr	r3, [pc, #376]	; (8000f08 <traffic_time+0x218>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d10a      	bne.n	8000dac <traffic_time+0xbc>
					counter1 = RED1_TIME/100;
 8000d96:	4b5d      	ldr	r3, [pc, #372]	; (8000f0c <traffic_time+0x21c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a5d      	ldr	r2, [pc, #372]	; (8000f10 <traffic_time+0x220>)
 8000d9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000da0:	1152      	asrs	r2, r2, #5
 8000da2:	17db      	asrs	r3, r3, #31
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	4a57      	ldr	r2, [pc, #348]	; (8000f04 <traffic_time+0x214>)
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	e01c      	b.n	8000de6 <traffic_time+0xf6>
				else if(status1 == GREEN1){
 8000dac:	4b56      	ldr	r3, [pc, #344]	; (8000f08 <traffic_time+0x218>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	d10a      	bne.n	8000dca <traffic_time+0xda>
					counter1 = GREEN1_TIME/100;
 8000db4:	4b57      	ldr	r3, [pc, #348]	; (8000f14 <traffic_time+0x224>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a55      	ldr	r2, [pc, #340]	; (8000f10 <traffic_time+0x220>)
 8000dba:	fb82 1203 	smull	r1, r2, r2, r3
 8000dbe:	1152      	asrs	r2, r2, #5
 8000dc0:	17db      	asrs	r3, r3, #31
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	4a4f      	ldr	r2, [pc, #316]	; (8000f04 <traffic_time+0x214>)
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	e00d      	b.n	8000de6 <traffic_time+0xf6>
				else if(status1 == YELLOW1){
 8000dca:	4b4f      	ldr	r3, [pc, #316]	; (8000f08 <traffic_time+0x218>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d109      	bne.n	8000de6 <traffic_time+0xf6>
					counter1 = YELLOW1_TIME/100;
 8000dd2:	4b51      	ldr	r3, [pc, #324]	; (8000f18 <traffic_time+0x228>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a4e      	ldr	r2, [pc, #312]	; (8000f10 <traffic_time+0x220>)
 8000dd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ddc:	1152      	asrs	r2, r2, #5
 8000dde:	17db      	asrs	r3, r3, #31
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	4a48      	ldr	r2, [pc, #288]	; (8000f04 <traffic_time+0x214>)
 8000de4:	6013      	str	r3, [r2, #0]
		if(timer5_flag == 1){
 8000de6:	4b4d      	ldr	r3, [pc, #308]	; (8000f1c <traffic_time+0x22c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d17c      	bne.n	8000ee8 <traffic_time+0x1f8>
			counter1--;
 8000dee:	4b45      	ldr	r3, [pc, #276]	; (8000f04 <traffic_time+0x214>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	4a43      	ldr	r2, [pc, #268]	; (8000f04 <traffic_time+0x214>)
 8000df6:	6013      	str	r3, [r2, #0]
			counter2--;
 8000df8:	4b49      	ldr	r3, [pc, #292]	; (8000f20 <traffic_time+0x230>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	4a48      	ldr	r2, [pc, #288]	; (8000f20 <traffic_time+0x230>)
 8000e00:	6013      	str	r3, [r2, #0]
			index_traffic = 1;
 8000e02:	4b3d      	ldr	r3, [pc, #244]	; (8000ef8 <traffic_time+0x208>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	601a      	str	r2, [r3, #0]
			setTimer5(100);
 8000e08:	2064      	movs	r0, #100	; 0x64
 8000e0a:	f000 fd43 	bl	8001894 <setTimer5>
		break;
 8000e0e:	e06b      	b.n	8000ee8 <traffic_time+0x1f8>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e16:	4839      	ldr	r0, [pc, #228]	; (8000efc <traffic_time+0x20c>)
 8000e18:	f001 f96f 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e22:	4836      	ldr	r0, [pc, #216]	; (8000efc <traffic_time+0x20c>)
 8000e24:	f001 f969 	bl	80020fa <HAL_GPIO_WritePin>
		display7SEG_1(value2 / 10);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	4a35      	ldr	r2, [pc, #212]	; (8000f00 <traffic_time+0x210>)
 8000e2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e30:	1092      	asrs	r2, r2, #2
 8000e32:	17db      	asrs	r3, r3, #31
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fb66 	bl	8000508 <display7SEG_1>
		display7SEG_2(value2 % 10);
 8000e3c:	683a      	ldr	r2, [r7, #0]
 8000e3e:	4b30      	ldr	r3, [pc, #192]	; (8000f00 <traffic_time+0x210>)
 8000e40:	fb83 1302 	smull	r1, r3, r3, r2
 8000e44:	1099      	asrs	r1, r3, #2
 8000e46:	17d3      	asrs	r3, r2, #31
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	440b      	add	r3, r1
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	1ad1      	subs	r1, r2, r3
 8000e54:	4608      	mov	r0, r1
 8000e56:	f7ff fce7 	bl	8000828 <display7SEG_2>
  		if(counter2 <= 0){
 8000e5a:	4b31      	ldr	r3, [pc, #196]	; (8000f20 <traffic_time+0x230>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	dc2b      	bgt.n	8000eba <traffic_time+0x1ca>
			if(status2 == RED2){
 8000e62:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <traffic_time+0x234>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b05      	cmp	r3, #5
 8000e68:	d10a      	bne.n	8000e80 <traffic_time+0x190>
				counter2 = RED2_TIME/100;
 8000e6a:	4b2f      	ldr	r3, [pc, #188]	; (8000f28 <traffic_time+0x238>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a28      	ldr	r2, [pc, #160]	; (8000f10 <traffic_time+0x220>)
 8000e70:	fb82 1203 	smull	r1, r2, r2, r3
 8000e74:	1152      	asrs	r2, r2, #5
 8000e76:	17db      	asrs	r3, r3, #31
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	4a29      	ldr	r2, [pc, #164]	; (8000f20 <traffic_time+0x230>)
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	e01c      	b.n	8000eba <traffic_time+0x1ca>
			else if(status2 == GREEN2){
 8000e80:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <traffic_time+0x234>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b07      	cmp	r3, #7
 8000e86:	d10a      	bne.n	8000e9e <traffic_time+0x1ae>
				counter2 = GREEN2_TIME/100;
 8000e88:	4b28      	ldr	r3, [pc, #160]	; (8000f2c <traffic_time+0x23c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a20      	ldr	r2, [pc, #128]	; (8000f10 <traffic_time+0x220>)
 8000e8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e92:	1152      	asrs	r2, r2, #5
 8000e94:	17db      	asrs	r3, r3, #31
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	4a21      	ldr	r2, [pc, #132]	; (8000f20 <traffic_time+0x230>)
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	e00d      	b.n	8000eba <traffic_time+0x1ca>
			else if(status2 == YELLOW2){
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <traffic_time+0x234>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d109      	bne.n	8000eba <traffic_time+0x1ca>
				counter2 = YELLOW2_TIME/100;
 8000ea6:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <traffic_time+0x240>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a19      	ldr	r2, [pc, #100]	; (8000f10 <traffic_time+0x220>)
 8000eac:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb0:	1152      	asrs	r2, r2, #5
 8000eb2:	17db      	asrs	r3, r3, #31
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	4a1a      	ldr	r2, [pc, #104]	; (8000f20 <traffic_time+0x230>)
 8000eb8:	6013      	str	r3, [r2, #0]
		if(timer5_flag == 1){
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <traffic_time+0x22c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d114      	bne.n	8000eec <traffic_time+0x1fc>
			counter1--;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <traffic_time+0x214>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <traffic_time+0x214>)
 8000eca:	6013      	str	r3, [r2, #0]
			counter2--;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <traffic_time+0x230>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <traffic_time+0x230>)
 8000ed4:	6013      	str	r3, [r2, #0]
			index_traffic = 0;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <traffic_time+0x208>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
			setTimer5(100);
 8000edc:	2064      	movs	r0, #100	; 0x64
 8000ede:	f000 fcd9 	bl	8001894 <setTimer5>
		break;
 8000ee2:	e003      	b.n	8000eec <traffic_time+0x1fc>
		break;
 8000ee4:	bf00      	nop
 8000ee6:	e002      	b.n	8000eee <traffic_time+0x1fe>
		break;
 8000ee8:	bf00      	nop
 8000eea:	e000      	b.n	8000eee <traffic_time+0x1fe>
		break;
 8000eec:	bf00      	nop
	}
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000054 	.word	0x20000054
 8000efc:	40010800 	.word	0x40010800
 8000f00:	66666667 	.word	0x66666667
 8000f04:	2000004c 	.word	0x2000004c
 8000f08:	20000090 	.word	0x20000090
 8000f0c:	20000034 	.word	0x20000034
 8000f10:	51eb851f 	.word	0x51eb851f
 8000f14:	2000003c 	.word	0x2000003c
 8000f18:	20000038 	.word	0x20000038
 8000f1c:	200000d4 	.word	0x200000d4
 8000f20:	20000050 	.word	0x20000050
 8000f24:	20000094 	.word	0x20000094
 8000f28:	20000040 	.word	0x20000040
 8000f2c:	20000048 	.word	0x20000048
 8000f30:	20000044 	.word	0x20000044

08000f34 <fsm_automatic1_run>:
 *      Author: HP
 */

#include "fsm_automatic.h"

void fsm_automatic1_run(){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	switch(status1){
 8000f38:	4b65      	ldr	r3, [pc, #404]	; (80010d0 <fsm_automatic1_run+0x19c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	f200 80bc 	bhi.w	80010bc <fsm_automatic1_run+0x188>
 8000f44:	a201      	add	r2, pc, #4	; (adr r2, 8000f4c <fsm_automatic1_run+0x18>)
 8000f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4a:	bf00      	nop
 8000f4c:	08000f5d 	.word	0x08000f5d
 8000f50:	08000faf 	.word	0x08000faf
 8000f54:	08001009 	.word	0x08001009
 8000f58:	08001063 	.word	0x08001063
	case INIT:
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2108      	movs	r1, #8
 8000f60:	485c      	ldr	r0, [pc, #368]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 8000f62:	f001 f8ca 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	2102      	movs	r1, #2
 8000f6a:	485a      	ldr	r0, [pc, #360]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 8000f6c:	f001 f8c5 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2104      	movs	r1, #4
 8000f74:	4857      	ldr	r0, [pc, #348]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 8000f76:	f001 f8c0 	bl	80020fa <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(red3_GPIO_Port, red3_Pin, GPIO_PIN_SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f80:	4854      	ldr	r0, [pc, #336]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 8000f82:	f001 f8ba 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green3_GPIO_Port, green3_Pin, GPIO_PIN_SET);
 8000f86:	2201      	movs	r2, #1
 8000f88:	2180      	movs	r1, #128	; 0x80
 8000f8a:	4852      	ldr	r0, [pc, #328]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 8000f8c:	f001 f8b5 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow3_GPIO_Port, yellow3_Pin, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f96:	484f      	ldr	r0, [pc, #316]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 8000f98:	f001 f8af 	bl	80020fa <HAL_GPIO_WritePin>

		status1 = RED1;
 8000f9c:	4b4c      	ldr	r3, [pc, #304]	; (80010d0 <fsm_automatic1_run+0x19c>)
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	601a      	str	r2, [r3, #0]
		setTimer1(RED1_TIME);
 8000fa2:	4b4d      	ldr	r3, [pc, #308]	; (80010d8 <fsm_automatic1_run+0x1a4>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fc24 	bl	80017f4 <setTimer1>
		break;
 8000fac:	e08d      	b.n	80010ca <fsm_automatic1_run+0x196>
	case RED1:
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	4848      	ldr	r0, [pc, #288]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 8000fb4:	f001 f8a1 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2102      	movs	r1, #2
 8000fbc:	4845      	ldr	r0, [pc, #276]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 8000fbe:	f001 f89c 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	4843      	ldr	r0, [pc, #268]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 8000fc8:	f001 f897 	bl	80020fa <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(red3_GPIO_Port, red3_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd2:	4840      	ldr	r0, [pc, #256]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 8000fd4:	f001 f891 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green3_GPIO_Port, green3_Pin, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2180      	movs	r1, #128	; 0x80
 8000fdc:	483d      	ldr	r0, [pc, #244]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 8000fde:	f001 f88c 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow3_GPIO_Port, yellow3_Pin, GPIO_PIN_SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe8:	483a      	ldr	r0, [pc, #232]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 8000fea:	f001 f886 	bl	80020fa <HAL_GPIO_WritePin>

		if(timer1_flag == 1){
 8000fee:	4b3b      	ldr	r3, [pc, #236]	; (80010dc <fsm_automatic1_run+0x1a8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d164      	bne.n	80010c0 <fsm_automatic1_run+0x18c>
			status1 = GREEN1;
 8000ff6:	4b36      	ldr	r3, [pc, #216]	; (80010d0 <fsm_automatic1_run+0x19c>)
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	601a      	str	r2, [r3, #0]
			setTimer1(GREEN1_TIME);
 8000ffc:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <fsm_automatic1_run+0x1ac>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f000 fbf7 	bl	80017f4 <setTimer1>
		}
		break;
 8001006:	e05b      	b.n	80010c0 <fsm_automatic1_run+0x18c>
	case YELLOW1:
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 8001008:	2201      	movs	r2, #1
 800100a:	2108      	movs	r1, #8
 800100c:	4831      	ldr	r0, [pc, #196]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 800100e:	f001 f874 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 8001012:	2201      	movs	r2, #1
 8001014:	2102      	movs	r1, #2
 8001016:	482f      	ldr	r0, [pc, #188]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 8001018:	f001 f86f 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2104      	movs	r1, #4
 8001020:	482c      	ldr	r0, [pc, #176]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 8001022:	f001 f86a 	bl	80020fa <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(red3_GPIO_Port, red3_Pin, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	f44f 7100 	mov.w	r1, #512	; 0x200
 800102c:	4829      	ldr	r0, [pc, #164]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 800102e:	f001 f864 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green3_GPIO_Port, green3_Pin, GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	4827      	ldr	r0, [pc, #156]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 8001038:	f001 f85f 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow3_GPIO_Port, yellow3_Pin, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001042:	4824      	ldr	r0, [pc, #144]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 8001044:	f001 f859 	bl	80020fa <HAL_GPIO_WritePin>
		if(timer1_flag == 1){
 8001048:	4b24      	ldr	r3, [pc, #144]	; (80010dc <fsm_automatic1_run+0x1a8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d139      	bne.n	80010c4 <fsm_automatic1_run+0x190>
			status1 = RED1;
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <fsm_automatic1_run+0x19c>)
 8001052:	2202      	movs	r2, #2
 8001054:	601a      	str	r2, [r3, #0]
			setTimer1(RED1_TIME);
 8001056:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <fsm_automatic1_run+0x1a4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f000 fbca 	bl	80017f4 <setTimer1>
		}
		break;
 8001060:	e030      	b.n	80010c4 <fsm_automatic1_run+0x190>
	case GREEN1:
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	2108      	movs	r1, #8
 8001066:	481b      	ldr	r0, [pc, #108]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 8001068:	f001 f847 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	2102      	movs	r1, #2
 8001070:	4818      	ldr	r0, [pc, #96]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 8001072:	f001 f842 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	2104      	movs	r1, #4
 800107a:	4816      	ldr	r0, [pc, #88]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 800107c:	f001 f83d 	bl	80020fa <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(red3_GPIO_Port, red3_Pin, GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001086:	4813      	ldr	r0, [pc, #76]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 8001088:	f001 f837 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green3_GPIO_Port, green3_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2180      	movs	r1, #128	; 0x80
 8001090:	4810      	ldr	r0, [pc, #64]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 8001092:	f001 f832 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow3_GPIO_Port, yellow3_Pin, GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <fsm_automatic1_run+0x1a0>)
 800109e:	f001 f82c 	bl	80020fa <HAL_GPIO_WritePin>
		if(timer1_flag == 1){
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <fsm_automatic1_run+0x1a8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d10e      	bne.n	80010c8 <fsm_automatic1_run+0x194>
			status1 = YELLOW1;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <fsm_automatic1_run+0x19c>)
 80010ac:	2203      	movs	r2, #3
 80010ae:	601a      	str	r2, [r3, #0]
			setTimer1(YELLOW1_TIME);
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <fsm_automatic1_run+0x1b0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fb9d 	bl	80017f4 <setTimer1>
		}
		break;
 80010ba:	e005      	b.n	80010c8 <fsm_automatic1_run+0x194>
	default:
		break;
 80010bc:	bf00      	nop
 80010be:	e004      	b.n	80010ca <fsm_automatic1_run+0x196>
		break;
 80010c0:	bf00      	nop
 80010c2:	e002      	b.n	80010ca <fsm_automatic1_run+0x196>
		break;
 80010c4:	bf00      	nop
 80010c6:	e000      	b.n	80010ca <fsm_automatic1_run+0x196>
		break;
 80010c8:	bf00      	nop
	}
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000090 	.word	0x20000090
 80010d4:	40010800 	.word	0x40010800
 80010d8:	20000034 	.word	0x20000034
 80010dc:	200000b4 	.word	0x200000b4
 80010e0:	2000003c 	.word	0x2000003c
 80010e4:	20000038 	.word	0x20000038

080010e8 <fsm_automatic2_run>:

void fsm_automatic2_run(){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	switch(status2){
 80010ec:	4b6a      	ldr	r3, [pc, #424]	; (8001298 <fsm_automatic2_run+0x1b0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	f200 80c6 	bhi.w	8001284 <fsm_automatic2_run+0x19c>
 80010f8:	a201      	add	r2, pc, #4	; (adr r2, 8001100 <fsm_automatic2_run+0x18>)
 80010fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fe:	bf00      	nop
 8001100:	0800111d 	.word	0x0800111d
 8001104:	08001285 	.word	0x08001285
 8001108:	08001285 	.word	0x08001285
 800110c:	08001285 	.word	0x08001285
 8001110:	08001171 	.word	0x08001171
 8001114:	080011cd 	.word	0x080011cd
 8001118:	08001229 	.word	0x08001229
	case INIT:
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	2140      	movs	r1, #64	; 0x40
 8001120:	485e      	ldr	r0, [pc, #376]	; (800129c <fsm_automatic2_run+0x1b4>)
 8001122:	f000 ffea 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 8001126:	2201      	movs	r2, #1
 8001128:	2110      	movs	r1, #16
 800112a:	485c      	ldr	r0, [pc, #368]	; (800129c <fsm_automatic2_run+0x1b4>)
 800112c:	f000 ffe5 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	2120      	movs	r1, #32
 8001134:	4859      	ldr	r0, [pc, #356]	; (800129c <fsm_automatic2_run+0x1b4>)
 8001136:	f000 ffe0 	bl	80020fa <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(red4_GPIO_Port, red4_Pin, GPIO_PIN_SET);
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001140:	4856      	ldr	r0, [pc, #344]	; (800129c <fsm_automatic2_run+0x1b4>)
 8001142:	f000 ffda 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green4_GPIO_Port, green4_Pin, GPIO_PIN_SET);
 8001146:	2201      	movs	r2, #1
 8001148:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800114c:	4853      	ldr	r0, [pc, #332]	; (800129c <fsm_automatic2_run+0x1b4>)
 800114e:	f000 ffd4 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow4_GPIO_Port, yellow4_Pin, GPIO_PIN_SET);
 8001152:	2201      	movs	r2, #1
 8001154:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001158:	4850      	ldr	r0, [pc, #320]	; (800129c <fsm_automatic2_run+0x1b4>)
 800115a:	f000 ffce 	bl	80020fa <HAL_GPIO_WritePin>
		status2 = GREEN2;
 800115e:	4b4e      	ldr	r3, [pc, #312]	; (8001298 <fsm_automatic2_run+0x1b0>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
		setTimer4(GREEN2_TIME);
 8001164:	4b4e      	ldr	r3, [pc, #312]	; (80012a0 <fsm_automatic2_run+0x1b8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f000 fb7f 	bl	800186c <setTimer4>
		break;
 800116e:	e090      	b.n	8001292 <fsm_automatic2_run+0x1aa>
	case RED2:
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	2140      	movs	r1, #64	; 0x40
 8001174:	4849      	ldr	r0, [pc, #292]	; (800129c <fsm_automatic2_run+0x1b4>)
 8001176:	f000 ffc0 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 800117a:	2201      	movs	r2, #1
 800117c:	2110      	movs	r1, #16
 800117e:	4847      	ldr	r0, [pc, #284]	; (800129c <fsm_automatic2_run+0x1b4>)
 8001180:	f000 ffbb 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 8001184:	2201      	movs	r2, #1
 8001186:	2120      	movs	r1, #32
 8001188:	4844      	ldr	r0, [pc, #272]	; (800129c <fsm_automatic2_run+0x1b4>)
 800118a:	f000 ffb6 	bl	80020fa <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(red4_GPIO_Port, red4_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001194:	4841      	ldr	r0, [pc, #260]	; (800129c <fsm_automatic2_run+0x1b4>)
 8001196:	f000 ffb0 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green4_GPIO_Port, green4_Pin, GPIO_PIN_SET);
 800119a:	2201      	movs	r2, #1
 800119c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a0:	483e      	ldr	r0, [pc, #248]	; (800129c <fsm_automatic2_run+0x1b4>)
 80011a2:	f000 ffaa 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow4_GPIO_Port, yellow4_Pin, GPIO_PIN_SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ac:	483b      	ldr	r0, [pc, #236]	; (800129c <fsm_automatic2_run+0x1b4>)
 80011ae:	f000 ffa4 	bl	80020fa <HAL_GPIO_WritePin>
		if(timer4_flag == 1){
 80011b2:	4b3c      	ldr	r3, [pc, #240]	; (80012a4 <fsm_automatic2_run+0x1bc>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d166      	bne.n	8001288 <fsm_automatic2_run+0x1a0>
			status2 = GREEN2;
 80011ba:	4b37      	ldr	r3, [pc, #220]	; (8001298 <fsm_automatic2_run+0x1b0>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
			setTimer4(GREEN2_TIME);
 80011c0:	4b37      	ldr	r3, [pc, #220]	; (80012a0 <fsm_automatic2_run+0x1b8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fb51 	bl	800186c <setTimer4>
		}
		break;
 80011ca:	e05d      	b.n	8001288 <fsm_automatic2_run+0x1a0>
	case YELLOW2:
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	2140      	movs	r1, #64	; 0x40
 80011d0:	4832      	ldr	r0, [pc, #200]	; (800129c <fsm_automatic2_run+0x1b4>)
 80011d2:	f000 ff92 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2110      	movs	r1, #16
 80011da:	4830      	ldr	r0, [pc, #192]	; (800129c <fsm_automatic2_run+0x1b4>)
 80011dc:	f000 ff8d 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2120      	movs	r1, #32
 80011e4:	482d      	ldr	r0, [pc, #180]	; (800129c <fsm_automatic2_run+0x1b4>)
 80011e6:	f000 ff88 	bl	80020fa <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(red4_GPIO_Port, red4_Pin, GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011f0:	482a      	ldr	r0, [pc, #168]	; (800129c <fsm_automatic2_run+0x1b4>)
 80011f2:	f000 ff82 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green4_GPIO_Port, green4_Pin, GPIO_PIN_SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011fc:	4827      	ldr	r0, [pc, #156]	; (800129c <fsm_automatic2_run+0x1b4>)
 80011fe:	f000 ff7c 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow4_GPIO_Port, yellow4_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001208:	4824      	ldr	r0, [pc, #144]	; (800129c <fsm_automatic2_run+0x1b4>)
 800120a:	f000 ff76 	bl	80020fa <HAL_GPIO_WritePin>
		if(timer4_flag == 1){
 800120e:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <fsm_automatic2_run+0x1bc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d13a      	bne.n	800128c <fsm_automatic2_run+0x1a4>
			status2 = RED2;
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <fsm_automatic2_run+0x1b0>)
 8001218:	2205      	movs	r2, #5
 800121a:	601a      	str	r2, [r3, #0]
			setTimer4(RED2_TIME);
 800121c:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <fsm_automatic2_run+0x1c0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fb23 	bl	800186c <setTimer4>
		}
		break;
 8001226:	e031      	b.n	800128c <fsm_automatic2_run+0x1a4>
	case GREEN2:
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	2140      	movs	r1, #64	; 0x40
 800122c:	481b      	ldr	r0, [pc, #108]	; (800129c <fsm_automatic2_run+0x1b4>)
 800122e:	f000 ff64 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2110      	movs	r1, #16
 8001236:	4819      	ldr	r0, [pc, #100]	; (800129c <fsm_automatic2_run+0x1b4>)
 8001238:	f000 ff5f 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	2120      	movs	r1, #32
 8001240:	4816      	ldr	r0, [pc, #88]	; (800129c <fsm_automatic2_run+0x1b4>)
 8001242:	f000 ff5a 	bl	80020fa <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(red4_GPIO_Port, red4_Pin, GPIO_PIN_SET);
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800124c:	4813      	ldr	r0, [pc, #76]	; (800129c <fsm_automatic2_run+0x1b4>)
 800124e:	f000 ff54 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green4_GPIO_Port, green4_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001258:	4810      	ldr	r0, [pc, #64]	; (800129c <fsm_automatic2_run+0x1b4>)
 800125a:	f000 ff4e 	bl	80020fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow4_GPIO_Port, yellow4_Pin, GPIO_PIN_SET);
 800125e:	2201      	movs	r2, #1
 8001260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001264:	480d      	ldr	r0, [pc, #52]	; (800129c <fsm_automatic2_run+0x1b4>)
 8001266:	f000 ff48 	bl	80020fa <HAL_GPIO_WritePin>
		if(timer4_flag == 1){
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <fsm_automatic2_run+0x1bc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d10e      	bne.n	8001290 <fsm_automatic2_run+0x1a8>
			status2 = YELLOW2;
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <fsm_automatic2_run+0x1b0>)
 8001274:	2206      	movs	r2, #6
 8001276:	601a      	str	r2, [r3, #0]
			setTimer4(YELLOW2_TIME);
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <fsm_automatic2_run+0x1c4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 faf5 	bl	800186c <setTimer4>
		}
		break;
 8001282:	e005      	b.n	8001290 <fsm_automatic2_run+0x1a8>
	default:
		break;
 8001284:	bf00      	nop
 8001286:	e004      	b.n	8001292 <fsm_automatic2_run+0x1aa>
		break;
 8001288:	bf00      	nop
 800128a:	e002      	b.n	8001292 <fsm_automatic2_run+0x1aa>
		break;
 800128c:	bf00      	nop
 800128e:	e000      	b.n	8001292 <fsm_automatic2_run+0x1aa>
		break;
 8001290:	bf00      	nop
	}
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000094 	.word	0x20000094
 800129c:	40010800 	.word	0x40010800
 80012a0:	20000048 	.word	0x20000048
 80012a4:	200000cc 	.word	0x200000cc
 80012a8:	20000040 	.word	0x20000040
 80012ac:	20000044 	.word	0x20000044

080012b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b6:	f000 fc1f 	bl	8001af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ba:	f000 f833 	bl	8001324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012be:	f000 f8b9 	bl	8001434 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012c2:	f000 f86b 	bl	800139c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80012c6:	4811      	ldr	r0, [pc, #68]	; (800130c <main+0x5c>)
 80012c8:	f001 fb80 	bl	80029cc <HAL_TIM_Base_Start_IT>
  status1 = INIT;
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <main+0x60>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]
  status2 = INIT;
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <main+0x64>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	601a      	str	r2, [r3, #0]
  status_main = NormalMode;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <main+0x68>)
 80012da:	220a      	movs	r2, #10
 80012dc:	601a      	str	r2, [r3, #0]
  uint32_t counter = 1 + htim2.Init.Period;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <main+0x5c>)
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	3301      	adds	r3, #1
 80012e4:	607b      	str	r3, [r7, #4]
  uint32_t prescaler = 1 + htim2.Init.Prescaler;
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <main+0x5c>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	3301      	adds	r3, #1
 80012ec:	603b      	str	r3, [r7, #0]
  frequency = 8000000/(counter*prescaler);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	fb02 f303 	mul.w	r3, r2, r3
 80012f6:	4a09      	ldr	r2, [pc, #36]	; (800131c <main+0x6c>)
 80012f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fc:	4a08      	ldr	r2, [pc, #32]	; (8001320 <main+0x70>)
 80012fe:	6013      	str	r3, [r2, #0]
  setTimer2(50);
 8001300:	2032      	movs	r0, #50	; 0x32
 8001302:	f000 fa8b 	bl	800181c <setTimer2>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  main_fsm();
 8001306:	f000 f919 	bl	800153c <main_fsm>
 800130a:	e7fc      	b.n	8001306 <main+0x56>
 800130c:	200000d8 	.word	0x200000d8
 8001310:	20000090 	.word	0x20000090
 8001314:	20000094 	.word	0x20000094
 8001318:	20000098 	.word	0x20000098
 800131c:	007a1200 	.word	0x007a1200
 8001320:	200000ac 	.word	0x200000ac

08001324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b090      	sub	sp, #64	; 0x40
 8001328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132a:	f107 0318 	add.w	r3, r7, #24
 800132e:	2228      	movs	r2, #40	; 0x28
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f001 ff02 	bl	800313c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001346:	2302      	movs	r3, #2
 8001348:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800134a:	2301      	movs	r3, #1
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134e:	2310      	movs	r3, #16
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001352:	2300      	movs	r3, #0
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	4618      	mov	r0, r3
 800135c:	f000 fefe 	bl	800215c <HAL_RCC_OscConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001366:	f000 f8e3 	bl	8001530 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136a:	230f      	movs	r3, #15
 800136c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f001 f96a 	bl	800265c <HAL_RCC_ClockConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800138e:	f000 f8cf 	bl	8001530 <Error_Handler>
  }
}
 8001392:	bf00      	nop
 8001394:	3740      	adds	r7, #64	; 0x40
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013b8:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <MX_TIM2_Init+0x94>)
 80013ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <MX_TIM2_Init+0x94>)
 80013c2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80013c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <MX_TIM2_Init+0x94>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <MX_TIM2_Init+0x94>)
 80013d0:	2209      	movs	r2, #9
 80013d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <MX_TIM2_Init+0x94>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <MX_TIM2_Init+0x94>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013e0:	4813      	ldr	r0, [pc, #76]	; (8001430 <MX_TIM2_Init+0x94>)
 80013e2:	f001 faa3 	bl	800292c <HAL_TIM_Base_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013ec:	f000 f8a0 	bl	8001530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	4619      	mov	r1, r3
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <MX_TIM2_Init+0x94>)
 80013fe:	f001 fc39 	bl	8002c74 <HAL_TIM_ConfigClockSource>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001408:	f000 f892 	bl	8001530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_TIM2_Init+0x94>)
 800141a:	f001 fe01 	bl	8003020 <HAL_TIMEx_MasterConfigSynchronization>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001424:	f000 f884 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200000d8 	.word	0x200000d8

08001434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001448:	4b2f      	ldr	r3, [pc, #188]	; (8001508 <MX_GPIO_Init+0xd4>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a2e      	ldr	r2, [pc, #184]	; (8001508 <MX_GPIO_Init+0xd4>)
 800144e:	f043 0310 	orr.w	r3, r3, #16
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b2c      	ldr	r3, [pc, #176]	; (8001508 <MX_GPIO_Init+0xd4>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0310 	and.w	r3, r3, #16
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001460:	4b29      	ldr	r3, [pc, #164]	; (8001508 <MX_GPIO_Init+0xd4>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a28      	ldr	r2, [pc, #160]	; (8001508 <MX_GPIO_Init+0xd4>)
 8001466:	f043 0304 	orr.w	r3, r3, #4
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b26      	ldr	r3, [pc, #152]	; (8001508 <MX_GPIO_Init+0xd4>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	4b23      	ldr	r3, [pc, #140]	; (8001508 <MX_GPIO_Init+0xd4>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a22      	ldr	r2, [pc, #136]	; (8001508 <MX_GPIO_Init+0xd4>)
 800147e:	f043 0308 	orr.w	r3, r3, #8
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b20      	ldr	r3, [pc, #128]	; (8001508 <MX_GPIO_Init+0xd4>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, green1_Pin|yellow1_Pin|red1_Pin|green2_Pin
 8001490:	2200      	movs	r2, #0
 8001492:	f64d 71fe 	movw	r1, #57342	; 0xdffe
 8001496:	481d      	ldr	r0, [pc, #116]	; (800150c <MX_GPIO_Init+0xd8>)
 8001498:	f000 fe2f 	bl	80020fa <HAL_GPIO_WritePin>
                          |yellow2_Pin|red2_Pin|green3_Pin|yellow3_Pin
                          |red3_Pin|green4_Pin|yellow4_Pin|red4_Pin
                          |EN1_Pin|EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin|d2_Pin
 800149c:	2200      	movs	r2, #0
 800149e:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80014a2:	481b      	ldr	r0, [pc, #108]	; (8001510 <MX_GPIO_Init+0xdc>)
 80014a4:	f000 fe29 	bl	80020fa <HAL_GPIO_WritePin>
                          |e2_Pin|f2_Pin|g2_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin|a2_Pin
                          |b2_Pin|c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 80014a8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80014ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b6:	f107 0310 	add.w	r3, r7, #16
 80014ba:	4619      	mov	r1, r3
 80014bc:	4815      	ldr	r0, [pc, #84]	; (8001514 <MX_GPIO_Init+0xe0>)
 80014be:	f000 fc8b 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : green1_Pin yellow1_Pin red1_Pin green2_Pin
                           yellow2_Pin red2_Pin green3_Pin yellow3_Pin
                           red3_Pin green4_Pin yellow4_Pin red4_Pin
                           EN1_Pin EN2_Pin */
  GPIO_InitStruct.Pin = green1_Pin|yellow1_Pin|red1_Pin|green2_Pin
 80014c2:	f64d 73fe 	movw	r3, #57342	; 0xdffe
 80014c6:	613b      	str	r3, [r7, #16]
                          |yellow2_Pin|red2_Pin|green3_Pin|yellow3_Pin
                          |red3_Pin|green4_Pin|yellow4_Pin|red4_Pin
                          |EN1_Pin|EN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	4619      	mov	r1, r3
 80014da:	480c      	ldr	r0, [pc, #48]	; (800150c <MX_GPIO_Init+0xd8>)
 80014dc:	f000 fc7c 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : a1_Pin b1_Pin c1_Pin d2_Pin
                           e2_Pin f2_Pin g2_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin a2_Pin
                           b2_Pin c2_Pin */
  GPIO_InitStruct.Pin = a1_Pin|b1_Pin|c1_Pin|d2_Pin
 80014e0:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80014e4:	613b      	str	r3, [r7, #16]
                          |e2_Pin|f2_Pin|g2_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin|a2_Pin
                          |b2_Pin|c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2302      	movs	r3, #2
 80014f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_GPIO_Init+0xdc>)
 80014fa:	f000 fc6d 	bl	8001dd8 <HAL_GPIO_Init>

}
 80014fe:	bf00      	nop
 8001500:	3720      	adds	r7, #32
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000
 800150c:	40010800 	.word	0x40010800
 8001510:	40010c00 	.word	0x40010c00
 8001514:	40011000 	.word	0x40011000

08001518 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001520:	f000 f9cc 	bl	80018bc <timerRun>
	getKeyInput();
 8001524:	f7fe ff18 	bl	8000358 <getKeyInput>
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001534:	b672      	cpsid	i
}
 8001536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001538:	e7fe      	b.n	8001538 <Error_Handler+0x8>
	...

0800153c <main_fsm>:

#include "main_fsm.h"
#include "display7SEG.h"
#include "blink_led.h"

void main_fsm(){
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	  switch(status_main){
 8001540:	4b9e      	ldr	r3, [pc, #632]	; (80017bc <main_fsm+0x280>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3b0a      	subs	r3, #10
 8001546:	2b03      	cmp	r3, #3
 8001548:	f200 812d 	bhi.w	80017a6 <main_fsm+0x26a>
 800154c:	a201      	add	r2, pc, #4	; (adr r2, 8001554 <main_fsm+0x18>)
 800154e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001552:	bf00      	nop
 8001554:	08001565 	.word	0x08001565
 8001558:	0800159b 	.word	0x0800159b
 800155c:	0800164d 	.word	0x0800164d
 8001560:	080016fd 	.word	0x080016fd
	  	case NormalMode:
	  		fsm_automatic1_run();
 8001564:	f7ff fce6 	bl	8000f34 <fsm_automatic1_run>
	  		fsm_automatic2_run();
 8001568:	f7ff fdbe 	bl	80010e8 <fsm_automatic2_run>
	  		//display traffic count down time
	  		traffic_time(counter1, counter2);
 800156c:	4b94      	ldr	r3, [pc, #592]	; (80017c0 <main_fsm+0x284>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a94      	ldr	r2, [pc, #592]	; (80017c4 <main_fsm+0x288>)
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fbba 	bl	8000cf0 <traffic_time>
	  		if(isButton1Pressed() == 1){
 800157c:	f7fe fe92 	bl	80002a4 <isButton1Pressed>
 8001580:	4603      	mov	r3, r0
 8001582:	2b01      	cmp	r3, #1
 8001584:	f040 8111 	bne.w	80017aa <main_fsm+0x26e>
	  			clearAllLed();
 8001588:	f7fe fe44 	bl	8000214 <clearAllLed>
	  			setTimer2(50);
 800158c:	2032      	movs	r0, #50	; 0x32
 800158e:	f000 f945 	bl	800181c <setTimer2>
	  			status_main = Mode2;
 8001592:	4b8a      	ldr	r3, [pc, #552]	; (80017bc <main_fsm+0x280>)
 8001594:	220b      	movs	r2, #11
 8001596:	601a      	str	r2, [r3, #0]
	  		}
	  		break;
 8001598:	e107      	b.n	80017aa <main_fsm+0x26e>
	  	case Mode2:
	  		blink_led_red();
 800159a:	f7fe fdd7 	bl	800014c <blink_led_red>
	  		//display mode and time for RED_LED
	  		update7SEG1forMode234(RED1_TIME/100, 2);
 800159e:	4b8a      	ldr	r3, [pc, #552]	; (80017c8 <main_fsm+0x28c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a8a      	ldr	r2, [pc, #552]	; (80017cc <main_fsm+0x290>)
 80015a4:	fb82 1203 	smull	r1, r2, r2, r3
 80015a8:	1152      	asrs	r2, r2, #5
 80015aa:	17db      	asrs	r3, r3, #31
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2102      	movs	r1, #2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fb07 	bl	8000bc4 <update7SEG1forMode234>
	  		if(isButton1Pressed() == 1){
 80015b6:	f7fe fe75 	bl	80002a4 <isButton1Pressed>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d127      	bne.n	8001610 <main_fsm+0xd4>
	  			if(flag_red_change == 0){
 80015c0:	4b83      	ldr	r3, [pc, #524]	; (80017d0 <main_fsm+0x294>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d115      	bne.n	80015f4 <main_fsm+0xb8>
	  				RED1_TIME -= buffer_time*100;
 80015c8:	4b82      	ldr	r3, [pc, #520]	; (80017d4 <main_fsm+0x298>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80015d0:	fb02 f203 	mul.w	r2, r2, r3
 80015d4:	4b7c      	ldr	r3, [pc, #496]	; (80017c8 <main_fsm+0x28c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4413      	add	r3, r2
 80015da:	4a7b      	ldr	r2, [pc, #492]	; (80017c8 <main_fsm+0x28c>)
 80015dc:	6013      	str	r3, [r2, #0]
	  				RED2_TIME -= buffer_time*100;
 80015de:	4b7d      	ldr	r3, [pc, #500]	; (80017d4 <main_fsm+0x298>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80015e6:	fb02 f203 	mul.w	r2, r2, r3
 80015ea:	4b7b      	ldr	r3, [pc, #492]	; (80017d8 <main_fsm+0x29c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a79      	ldr	r2, [pc, #484]	; (80017d8 <main_fsm+0x29c>)
 80015f2:	6013      	str	r3, [r2, #0]
	  			}
	  			flag_red_change = 0;
 80015f4:	4b76      	ldr	r3, [pc, #472]	; (80017d0 <main_fsm+0x294>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
	  			buffer_time = 0;
 80015fa:	4b76      	ldr	r3, [pc, #472]	; (80017d4 <main_fsm+0x298>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
	  			clearAllLed();
 8001600:	f7fe fe08 	bl	8000214 <clearAllLed>
	  			setTimer2(50);
 8001604:	2032      	movs	r0, #50	; 0x32
 8001606:	f000 f909 	bl	800181c <setTimer2>
	  			status_main = Mode3;
 800160a:	4b6c      	ldr	r3, [pc, #432]	; (80017bc <main_fsm+0x280>)
 800160c:	220c      	movs	r2, #12
 800160e:	601a      	str	r2, [r3, #0]
	  		}
	  		if(isButton2Pressed() == 1){
 8001610:	f7fe fe5a 	bl	80002c8 <isButton2Pressed>
 8001614:	4603      	mov	r3, r0
 8001616:	2b01      	cmp	r3, #1
 8001618:	d10e      	bne.n	8001638 <main_fsm+0xfc>
	  			buffer_time++;
 800161a:	4b6e      	ldr	r3, [pc, #440]	; (80017d4 <main_fsm+0x298>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	4a6c      	ldr	r2, [pc, #432]	; (80017d4 <main_fsm+0x298>)
 8001622:	6013      	str	r3, [r2, #0]
	  			RED1_TIME += 100;
 8001624:	4b68      	ldr	r3, [pc, #416]	; (80017c8 <main_fsm+0x28c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	3364      	adds	r3, #100	; 0x64
 800162a:	4a67      	ldr	r2, [pc, #412]	; (80017c8 <main_fsm+0x28c>)
 800162c:	6013      	str	r3, [r2, #0]
	  			RED2_TIME += 100;
 800162e:	4b6a      	ldr	r3, [pc, #424]	; (80017d8 <main_fsm+0x29c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	3364      	adds	r3, #100	; 0x64
 8001634:	4a68      	ldr	r2, [pc, #416]	; (80017d8 <main_fsm+0x29c>)
 8001636:	6013      	str	r3, [r2, #0]
	  		}
	  		if(isButton3Pressed() == 1){
 8001638:	f7fe fe58 	bl	80002ec <isButton3Pressed>
 800163c:	4603      	mov	r3, r0
 800163e:	2b01      	cmp	r3, #1
 8001640:	f040 80b5 	bne.w	80017ae <main_fsm+0x272>
	  			flag_red_change = 1;
 8001644:	4b62      	ldr	r3, [pc, #392]	; (80017d0 <main_fsm+0x294>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]
	  		}
	  		break;
 800164a:	e0b0      	b.n	80017ae <main_fsm+0x272>
	  	case Mode3:
	  		blink_led_yellow();
 800164c:	f7fe fda0 	bl	8000190 <blink_led_yellow>
	  		//display mode and time for YELLOW_LED
	  		update7SEG1forMode234(YELLOW1_TIME/100, 3);
 8001650:	4b62      	ldr	r3, [pc, #392]	; (80017dc <main_fsm+0x2a0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a5d      	ldr	r2, [pc, #372]	; (80017cc <main_fsm+0x290>)
 8001656:	fb82 1203 	smull	r1, r2, r2, r3
 800165a:	1152      	asrs	r2, r2, #5
 800165c:	17db      	asrs	r3, r3, #31
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2103      	movs	r1, #3
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff faae 	bl	8000bc4 <update7SEG1forMode234>
	  		if(isButton1Pressed() == 1){
 8001668:	f7fe fe1c 	bl	80002a4 <isButton1Pressed>
 800166c:	4603      	mov	r3, r0
 800166e:	2b01      	cmp	r3, #1
 8001670:	d127      	bne.n	80016c2 <main_fsm+0x186>
	  			if(flag_yellow_change == 0){
 8001672:	4b5b      	ldr	r3, [pc, #364]	; (80017e0 <main_fsm+0x2a4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d115      	bne.n	80016a6 <main_fsm+0x16a>
	  				YELLOW1_TIME -= buffer_time*100;
 800167a:	4b56      	ldr	r3, [pc, #344]	; (80017d4 <main_fsm+0x298>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8001682:	fb02 f203 	mul.w	r2, r2, r3
 8001686:	4b55      	ldr	r3, [pc, #340]	; (80017dc <main_fsm+0x2a0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4413      	add	r3, r2
 800168c:	4a53      	ldr	r2, [pc, #332]	; (80017dc <main_fsm+0x2a0>)
 800168e:	6013      	str	r3, [r2, #0]
	  				YELLOW2_TIME -= buffer_time*100;
 8001690:	4b50      	ldr	r3, [pc, #320]	; (80017d4 <main_fsm+0x298>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8001698:	fb02 f203 	mul.w	r2, r2, r3
 800169c:	4b51      	ldr	r3, [pc, #324]	; (80017e4 <main_fsm+0x2a8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4413      	add	r3, r2
 80016a2:	4a50      	ldr	r2, [pc, #320]	; (80017e4 <main_fsm+0x2a8>)
 80016a4:	6013      	str	r3, [r2, #0]
	  			}
	  			flag_yellow_change = 0;
 80016a6:	4b4e      	ldr	r3, [pc, #312]	; (80017e0 <main_fsm+0x2a4>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
	  			buffer_time = 0;
 80016ac:	4b49      	ldr	r3, [pc, #292]	; (80017d4 <main_fsm+0x298>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
	  			clearAllLed();
 80016b2:	f7fe fdaf 	bl	8000214 <clearAllLed>
	  			setTimer2(50);
 80016b6:	2032      	movs	r0, #50	; 0x32
 80016b8:	f000 f8b0 	bl	800181c <setTimer2>
	  			status_main = Mode4;
 80016bc:	4b3f      	ldr	r3, [pc, #252]	; (80017bc <main_fsm+0x280>)
 80016be:	220d      	movs	r2, #13
 80016c0:	601a      	str	r2, [r3, #0]
	  		}
	  		if(isButton2Pressed() == 1){
 80016c2:	f7fe fe01 	bl	80002c8 <isButton2Pressed>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d10e      	bne.n	80016ea <main_fsm+0x1ae>
	  			buffer_time++;
 80016cc:	4b41      	ldr	r3, [pc, #260]	; (80017d4 <main_fsm+0x298>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	4a40      	ldr	r2, [pc, #256]	; (80017d4 <main_fsm+0x298>)
 80016d4:	6013      	str	r3, [r2, #0]
	  			YELLOW1_TIME += 100;
 80016d6:	4b41      	ldr	r3, [pc, #260]	; (80017dc <main_fsm+0x2a0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	3364      	adds	r3, #100	; 0x64
 80016dc:	4a3f      	ldr	r2, [pc, #252]	; (80017dc <main_fsm+0x2a0>)
 80016de:	6013      	str	r3, [r2, #0]
	  			YELLOW2_TIME += 100;
 80016e0:	4b40      	ldr	r3, [pc, #256]	; (80017e4 <main_fsm+0x2a8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	3364      	adds	r3, #100	; 0x64
 80016e6:	4a3f      	ldr	r2, [pc, #252]	; (80017e4 <main_fsm+0x2a8>)
 80016e8:	6013      	str	r3, [r2, #0]
	  		}
	  		if(isButton3Pressed() == 1){
 80016ea:	f7fe fdff 	bl	80002ec <isButton3Pressed>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d15e      	bne.n	80017b2 <main_fsm+0x276>
	  			flag_yellow_change = 1;
 80016f4:	4b3a      	ldr	r3, [pc, #232]	; (80017e0 <main_fsm+0x2a4>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]
	  		}
	  		break;
 80016fa:	e05a      	b.n	80017b2 <main_fsm+0x276>
	  	case Mode4:
	  		blink_led_green();
 80016fc:	f7fe fd6a 	bl	80001d4 <blink_led_green>
	  		//display mode and time for GREEN_LED
	  		update7SEG1forMode234(GREEN1_TIME/100, 4);
 8001700:	4b39      	ldr	r3, [pc, #228]	; (80017e8 <main_fsm+0x2ac>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a31      	ldr	r2, [pc, #196]	; (80017cc <main_fsm+0x290>)
 8001706:	fb82 1203 	smull	r1, r2, r2, r3
 800170a:	1152      	asrs	r2, r2, #5
 800170c:	17db      	asrs	r3, r3, #31
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2104      	movs	r1, #4
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fa56 	bl	8000bc4 <update7SEG1forMode234>
	  		if(isButton1Pressed() == 1){
 8001718:	f7fe fdc4 	bl	80002a4 <isButton1Pressed>
 800171c:	4603      	mov	r3, r0
 800171e:	2b01      	cmp	r3, #1
 8001720:	d124      	bne.n	800176c <main_fsm+0x230>
	  			if(flag_green_change == 0){
 8001722:	4b32      	ldr	r3, [pc, #200]	; (80017ec <main_fsm+0x2b0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d115      	bne.n	8001756 <main_fsm+0x21a>
	  				GREEN1_TIME -= buffer_time*100;
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <main_fsm+0x298>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8001732:	fb02 f203 	mul.w	r2, r2, r3
 8001736:	4b2c      	ldr	r3, [pc, #176]	; (80017e8 <main_fsm+0x2ac>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4413      	add	r3, r2
 800173c:	4a2a      	ldr	r2, [pc, #168]	; (80017e8 <main_fsm+0x2ac>)
 800173e:	6013      	str	r3, [r2, #0]
	  				GREEN2_TIME -= buffer_time*100;
 8001740:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <main_fsm+0x298>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8001748:	fb02 f203 	mul.w	r2, r2, r3
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <main_fsm+0x2b4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4413      	add	r3, r2
 8001752:	4a27      	ldr	r2, [pc, #156]	; (80017f0 <main_fsm+0x2b4>)
 8001754:	6013      	str	r3, [r2, #0]
	  			}
	  			flag_green_change = 0;
 8001756:	4b25      	ldr	r3, [pc, #148]	; (80017ec <main_fsm+0x2b0>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
	  			buffer_time = 0;
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <main_fsm+0x298>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
	  			clearAllLed();
 8001762:	f7fe fd57 	bl	8000214 <clearAllLed>
	  			status_main = NormalMode;
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <main_fsm+0x280>)
 8001768:	220a      	movs	r2, #10
 800176a:	601a      	str	r2, [r3, #0]
	  		}
	  		if(isButton2Pressed() == 1){
 800176c:	f7fe fdac 	bl	80002c8 <isButton2Pressed>
 8001770:	4603      	mov	r3, r0
 8001772:	2b01      	cmp	r3, #1
 8001774:	d10e      	bne.n	8001794 <main_fsm+0x258>
	  			buffer_time++;
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <main_fsm+0x298>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	3301      	adds	r3, #1
 800177c:	4a15      	ldr	r2, [pc, #84]	; (80017d4 <main_fsm+0x298>)
 800177e:	6013      	str	r3, [r2, #0]
	  			GREEN1_TIME += 100;
 8001780:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <main_fsm+0x2ac>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	3364      	adds	r3, #100	; 0x64
 8001786:	4a18      	ldr	r2, [pc, #96]	; (80017e8 <main_fsm+0x2ac>)
 8001788:	6013      	str	r3, [r2, #0]
	  			GREEN2_TIME += 100;
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <main_fsm+0x2b4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	3364      	adds	r3, #100	; 0x64
 8001790:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <main_fsm+0x2b4>)
 8001792:	6013      	str	r3, [r2, #0]
	  		}
	  		if(isButton3Pressed() == 1){
 8001794:	f7fe fdaa 	bl	80002ec <isButton3Pressed>
 8001798:	4603      	mov	r3, r0
 800179a:	2b01      	cmp	r3, #1
 800179c:	d10b      	bne.n	80017b6 <main_fsm+0x27a>
	  			flag_green_change = 1;
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <main_fsm+0x2b0>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	601a      	str	r2, [r3, #0]
	  		}
	  		break;
 80017a4:	e007      	b.n	80017b6 <main_fsm+0x27a>
	  	default:
	  		break;
 80017a6:	bf00      	nop
 80017a8:	e006      	b.n	80017b8 <main_fsm+0x27c>
	  		break;
 80017aa:	bf00      	nop
 80017ac:	e004      	b.n	80017b8 <main_fsm+0x27c>
	  		break;
 80017ae:	bf00      	nop
 80017b0:	e002      	b.n	80017b8 <main_fsm+0x27c>
	  		break;
 80017b2:	bf00      	nop
 80017b4:	e000      	b.n	80017b8 <main_fsm+0x27c>
	  		break;
 80017b6:	bf00      	nop
	  }
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000098 	.word	0x20000098
 80017c0:	2000004c 	.word	0x2000004c
 80017c4:	20000050 	.word	0x20000050
 80017c8:	20000034 	.word	0x20000034
 80017cc:	51eb851f 	.word	0x51eb851f
 80017d0:	200000a0 	.word	0x200000a0
 80017d4:	2000009c 	.word	0x2000009c
 80017d8:	20000040 	.word	0x20000040
 80017dc:	20000038 	.word	0x20000038
 80017e0:	200000a4 	.word	0x200000a4
 80017e4:	20000044 	.word	0x20000044
 80017e8:	2000003c 	.word	0x2000003c
 80017ec:	200000a8 	.word	0x200000a8
 80017f0:	20000048 	.word	0x20000048

080017f4 <setTimer1>:
int timer4_flag = 0;

int timer5_counter = 0;
int timer5_flag = 0;

void setTimer1(int duration){
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80017fc:	4a05      	ldr	r2, [pc, #20]	; (8001814 <setTimer1+0x20>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <setTimer1+0x24>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	200000b0 	.word	0x200000b0
 8001818:	200000b4 	.word	0x200000b4

0800181c <setTimer2>:

void setTimer2(int duration){
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8001824:	4a05      	ldr	r2, [pc, #20]	; (800183c <setTimer2+0x20>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <setTimer2+0x24>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	200000b8 	.word	0x200000b8
 8001840:	200000bc 	.word	0x200000bc

08001844 <setTimer3>:

void setTimer3(int duration){
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 800184c:	4a05      	ldr	r2, [pc, #20]	; (8001864 <setTimer3+0x20>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <setTimer3+0x24>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	200000c0 	.word	0x200000c0
 8001868:	200000c4 	.word	0x200000c4

0800186c <setTimer4>:

void setTimer4(int duration){
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8001874:	4a05      	ldr	r2, [pc, #20]	; (800188c <setTimer4+0x20>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <setTimer4+0x24>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	200000c8 	.word	0x200000c8
 8001890:	200000cc 	.word	0x200000cc

08001894 <setTimer5>:

void setTimer5(int duration){
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 800189c:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <setTimer5+0x20>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <setTimer5+0x24>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	200000d0 	.word	0x200000d0
 80018b8:	200000d4 	.word	0x200000d4

080018bc <timerRun>:

void timerRun(){
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <timerRun+0xac>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	dd0b      	ble.n	80018e0 <timerRun+0x24>
		timer1_counter--;
 80018c8:	4b27      	ldr	r3, [pc, #156]	; (8001968 <timerRun+0xac>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	3b01      	subs	r3, #1
 80018ce:	4a26      	ldr	r2, [pc, #152]	; (8001968 <timerRun+0xac>)
 80018d0:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 80018d2:	4b25      	ldr	r3, [pc, #148]	; (8001968 <timerRun+0xac>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	dc02      	bgt.n	80018e0 <timerRun+0x24>
			timer1_flag = 1;
 80018da:	4b24      	ldr	r3, [pc, #144]	; (800196c <timerRun+0xb0>)
 80018dc:	2201      	movs	r2, #1
 80018de:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 80018e0:	4b23      	ldr	r3, [pc, #140]	; (8001970 <timerRun+0xb4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	dd0b      	ble.n	8001900 <timerRun+0x44>
		timer2_counter--;
 80018e8:	4b21      	ldr	r3, [pc, #132]	; (8001970 <timerRun+0xb4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	4a20      	ldr	r2, [pc, #128]	; (8001970 <timerRun+0xb4>)
 80018f0:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 80018f2:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <timerRun+0xb4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	dc02      	bgt.n	8001900 <timerRun+0x44>
			timer2_flag = 1;
 80018fa:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <timerRun+0xb8>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <timerRun+0xbc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	dd0b      	ble.n	8001920 <timerRun+0x64>
		timer3_counter--;
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <timerRun+0xbc>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	3b01      	subs	r3, #1
 800190e:	4a1a      	ldr	r2, [pc, #104]	; (8001978 <timerRun+0xbc>)
 8001910:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8001912:	4b19      	ldr	r3, [pc, #100]	; (8001978 <timerRun+0xbc>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	dc02      	bgt.n	8001920 <timerRun+0x64>
			timer3_flag = 1;
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <timerRun+0xc0>)
 800191c:	2201      	movs	r2, #1
 800191e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 8001920:	4b17      	ldr	r3, [pc, #92]	; (8001980 <timerRun+0xc4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	dd0b      	ble.n	8001940 <timerRun+0x84>
		timer4_counter--;
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <timerRun+0xc4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	3b01      	subs	r3, #1
 800192e:	4a14      	ldr	r2, [pc, #80]	; (8001980 <timerRun+0xc4>)
 8001930:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <timerRun+0xc4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	dc02      	bgt.n	8001940 <timerRun+0x84>
			timer4_flag = 1;
 800193a:	4b12      	ldr	r3, [pc, #72]	; (8001984 <timerRun+0xc8>)
 800193c:	2201      	movs	r2, #1
 800193e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <timerRun+0xcc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	dd0b      	ble.n	8001960 <timerRun+0xa4>
		timer5_counter--;
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <timerRun+0xcc>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3b01      	subs	r3, #1
 800194e:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <timerRun+0xcc>)
 8001950:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0){
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <timerRun+0xcc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	dc02      	bgt.n	8001960 <timerRun+0xa4>
			timer5_flag = 1;
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <timerRun+0xd0>)
 800195c:	2201      	movs	r2, #1
 800195e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	200000b0 	.word	0x200000b0
 800196c:	200000b4 	.word	0x200000b4
 8001970:	200000b8 	.word	0x200000b8
 8001974:	200000bc 	.word	0x200000bc
 8001978:	200000c0 	.word	0x200000c0
 800197c:	200000c4 	.word	0x200000c4
 8001980:	200000c8 	.word	0x200000c8
 8001984:	200000cc 	.word	0x200000cc
 8001988:	200000d0 	.word	0x200000d0
 800198c:	200000d4 	.word	0x200000d4

08001990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_MspInit+0x5c>)
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	4a14      	ldr	r2, [pc, #80]	; (80019ec <HAL_MspInit+0x5c>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6193      	str	r3, [r2, #24]
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_MspInit+0x5c>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <HAL_MspInit+0x5c>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	4a0e      	ldr	r2, [pc, #56]	; (80019ec <HAL_MspInit+0x5c>)
 80019b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b8:	61d3      	str	r3, [r2, #28]
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <HAL_MspInit+0x5c>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_MspInit+0x60>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <HAL_MspInit+0x60>)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40010000 	.word	0x40010000

080019f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a04:	d113      	bne.n	8001a2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <HAL_TIM_Base_MspInit+0x44>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <HAL_TIM_Base_MspInit+0x44>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	61d3      	str	r3, [r2, #28]
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_TIM_Base_MspInit+0x44>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2100      	movs	r1, #0
 8001a22:	201c      	movs	r0, #28
 8001a24:	f000 f9a1 	bl	8001d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a28:	201c      	movs	r0, #28
 8001a2a:	f000 f9ba 	bl	8001da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000

08001a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <NMI_Handler+0x4>

08001a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <HardFault_Handler+0x4>

08001a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <MemManage_Handler+0x4>

08001a4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <BusFault_Handler+0x4>

08001a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <UsageFault_Handler+0x4>

08001a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr

08001a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a82:	f000 f87f 	bl	8001b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <TIM2_IRQHandler+0x10>)
 8001a92:	f000 ffe7 	bl	8002a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200000d8 	.word	0x200000d8

08001aa0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aac:	480c      	ldr	r0, [pc, #48]	; (8001ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aae:	490d      	ldr	r1, [pc, #52]	; (8001ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab4:	e002      	b.n	8001abc <LoopCopyDataInit>

08001ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aba:	3304      	adds	r3, #4

08001abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac0:	d3f9      	bcc.n	8001ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ac4:	4c0a      	ldr	r4, [pc, #40]	; (8001af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac8:	e001      	b.n	8001ace <LoopFillZerobss>

08001aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001acc:	3204      	adds	r2, #4

08001ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad0:	d3fb      	bcc.n	8001aca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ad2:	f7ff ffe5 	bl	8001aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad6:	f001 fb0d 	bl	80030f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ada:	f7ff fbe9 	bl	80012b0 <main>
  bx lr
 8001ade:	4770      	bx	lr
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001ae8:	0800318c 	.word	0x0800318c
  ldr r2, =_sbss
 8001aec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001af0:	20000124 	.word	0x20000124

08001af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC1_2_IRQHandler>
	...

08001af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_Init+0x28>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <HAL_Init+0x28>)
 8001b02:	f043 0310 	orr.w	r3, r3, #16
 8001b06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b08:	2003      	movs	r0, #3
 8001b0a:	f000 f923 	bl	8001d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0e:	200f      	movs	r0, #15
 8001b10:	f000 f808 	bl	8001b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b14:	f7ff ff3c 	bl	8001990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40022000 	.word	0x40022000

08001b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_InitTick+0x54>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_InitTick+0x58>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f93b 	bl	8001dbe <HAL_SYSTICK_Config>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00e      	b.n	8001b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	d80a      	bhi.n	8001b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f000 f903 	bl	8001d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b64:	4a06      	ldr	r2, [pc, #24]	; (8001b80 <HAL_InitTick+0x5c>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	2000005c 	.word	0x2000005c
 8001b7c:	20000064 	.word	0x20000064
 8001b80:	20000060 	.word	0x20000060

08001b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_IncTick+0x1c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_IncTick+0x20>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	4a03      	ldr	r2, [pc, #12]	; (8001ba4 <HAL_IncTick+0x20>)
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	20000064 	.word	0x20000064
 8001ba4:	20000120 	.word	0x20000120

08001ba8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bac:	4b02      	ldr	r3, [pc, #8]	; (8001bb8 <HAL_GetTick+0x10>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	20000120 	.word	0x20000120

08001bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bee:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	60d3      	str	r3, [r2, #12]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <__NVIC_GetPriorityGrouping+0x18>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	f003 0307 	and.w	r3, r3, #7
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	db0b      	blt.n	8001c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	f003 021f 	and.w	r2, r3, #31
 8001c38:	4906      	ldr	r1, [pc, #24]	; (8001c54 <__NVIC_EnableIRQ+0x34>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	2001      	movs	r0, #1
 8001c42:	fa00 f202 	lsl.w	r2, r0, r2
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	e000e100 	.word	0xe000e100

08001c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	6039      	str	r1, [r7, #0]
 8001c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	db0a      	blt.n	8001c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	490c      	ldr	r1, [pc, #48]	; (8001ca4 <__NVIC_SetPriority+0x4c>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	0112      	lsls	r2, r2, #4
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c80:	e00a      	b.n	8001c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4908      	ldr	r1, [pc, #32]	; (8001ca8 <__NVIC_SetPriority+0x50>)
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	3b04      	subs	r3, #4
 8001c90:	0112      	lsls	r2, r2, #4
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	440b      	add	r3, r1
 8001c96:	761a      	strb	r2, [r3, #24]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000e100 	.word	0xe000e100
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f1c3 0307 	rsb	r3, r3, #7
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	bf28      	it	cs
 8001cca:	2304      	movcs	r3, #4
 8001ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d902      	bls.n	8001cdc <NVIC_EncodePriority+0x30>
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3b03      	subs	r3, #3
 8001cda:	e000      	b.n	8001cde <NVIC_EncodePriority+0x32>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	401a      	ands	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	43d9      	mvns	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	4313      	orrs	r3, r2
         );
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3724      	adds	r7, #36	; 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d20:	d301      	bcc.n	8001d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00f      	b.n	8001d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <SysTick_Config+0x40>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2e:	210f      	movs	r1, #15
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f7ff ff90 	bl	8001c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <SysTick_Config+0x40>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <SysTick_Config+0x40>)
 8001d40:	2207      	movs	r2, #7
 8001d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	e000e010 	.word	0xe000e010

08001d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff2d 	bl	8001bbc <__NVIC_SetPriorityGrouping>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d7c:	f7ff ff42 	bl	8001c04 <__NVIC_GetPriorityGrouping>
 8001d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	6978      	ldr	r0, [r7, #20]
 8001d88:	f7ff ff90 	bl	8001cac <NVIC_EncodePriority>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff5f 	bl	8001c58 <__NVIC_SetPriority>
}
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff35 	bl	8001c20 <__NVIC_EnableIRQ>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ffa2 	bl	8001d10 <SysTick_Config>
 8001dcc:	4603      	mov	r3, r0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b08b      	sub	sp, #44	; 0x2c
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001de2:	2300      	movs	r3, #0
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dea:	e148      	b.n	800207e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dec:	2201      	movs	r2, #1
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	f040 8137 	bne.w	8002078 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4aa3      	ldr	r2, [pc, #652]	; (800209c <HAL_GPIO_Init+0x2c4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d05e      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
 8001e14:	4aa1      	ldr	r2, [pc, #644]	; (800209c <HAL_GPIO_Init+0x2c4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d875      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e1a:	4aa1      	ldr	r2, [pc, #644]	; (80020a0 <HAL_GPIO_Init+0x2c8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d058      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
 8001e20:	4a9f      	ldr	r2, [pc, #636]	; (80020a0 <HAL_GPIO_Init+0x2c8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d86f      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e26:	4a9f      	ldr	r2, [pc, #636]	; (80020a4 <HAL_GPIO_Init+0x2cc>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d052      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
 8001e2c:	4a9d      	ldr	r2, [pc, #628]	; (80020a4 <HAL_GPIO_Init+0x2cc>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d869      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e32:	4a9d      	ldr	r2, [pc, #628]	; (80020a8 <HAL_GPIO_Init+0x2d0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d04c      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
 8001e38:	4a9b      	ldr	r2, [pc, #620]	; (80020a8 <HAL_GPIO_Init+0x2d0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d863      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e3e:	4a9b      	ldr	r2, [pc, #620]	; (80020ac <HAL_GPIO_Init+0x2d4>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d046      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
 8001e44:	4a99      	ldr	r2, [pc, #612]	; (80020ac <HAL_GPIO_Init+0x2d4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d85d      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e4a:	2b12      	cmp	r3, #18
 8001e4c:	d82a      	bhi.n	8001ea4 <HAL_GPIO_Init+0xcc>
 8001e4e:	2b12      	cmp	r3, #18
 8001e50:	d859      	bhi.n	8001f06 <HAL_GPIO_Init+0x12e>
 8001e52:	a201      	add	r2, pc, #4	; (adr r2, 8001e58 <HAL_GPIO_Init+0x80>)
 8001e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e58:	08001ed3 	.word	0x08001ed3
 8001e5c:	08001ead 	.word	0x08001ead
 8001e60:	08001ebf 	.word	0x08001ebf
 8001e64:	08001f01 	.word	0x08001f01
 8001e68:	08001f07 	.word	0x08001f07
 8001e6c:	08001f07 	.word	0x08001f07
 8001e70:	08001f07 	.word	0x08001f07
 8001e74:	08001f07 	.word	0x08001f07
 8001e78:	08001f07 	.word	0x08001f07
 8001e7c:	08001f07 	.word	0x08001f07
 8001e80:	08001f07 	.word	0x08001f07
 8001e84:	08001f07 	.word	0x08001f07
 8001e88:	08001f07 	.word	0x08001f07
 8001e8c:	08001f07 	.word	0x08001f07
 8001e90:	08001f07 	.word	0x08001f07
 8001e94:	08001f07 	.word	0x08001f07
 8001e98:	08001f07 	.word	0x08001f07
 8001e9c:	08001eb5 	.word	0x08001eb5
 8001ea0:	08001ec9 	.word	0x08001ec9
 8001ea4:	4a82      	ldr	r2, [pc, #520]	; (80020b0 <HAL_GPIO_Init+0x2d8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d013      	beq.n	8001ed2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eaa:	e02c      	b.n	8001f06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	623b      	str	r3, [r7, #32]
          break;
 8001eb2:	e029      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	623b      	str	r3, [r7, #32]
          break;
 8001ebc:	e024      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	3308      	adds	r3, #8
 8001ec4:	623b      	str	r3, [r7, #32]
          break;
 8001ec6:	e01f      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	330c      	adds	r3, #12
 8001ece:	623b      	str	r3, [r7, #32]
          break;
 8001ed0:	e01a      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d102      	bne.n	8001ee0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eda:	2304      	movs	r3, #4
 8001edc:	623b      	str	r3, [r7, #32]
          break;
 8001ede:	e013      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d105      	bne.n	8001ef4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee8:	2308      	movs	r3, #8
 8001eea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	611a      	str	r2, [r3, #16]
          break;
 8001ef2:	e009      	b.n	8001f08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	615a      	str	r2, [r3, #20]
          break;
 8001efe:	e003      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
          break;
 8001f04:	e000      	b.n	8001f08 <HAL_GPIO_Init+0x130>
          break;
 8001f06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2bff      	cmp	r3, #255	; 0xff
 8001f0c:	d801      	bhi.n	8001f12 <HAL_GPIO_Init+0x13a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	e001      	b.n	8001f16 <HAL_GPIO_Init+0x13e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3304      	adds	r3, #4
 8001f16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2bff      	cmp	r3, #255	; 0xff
 8001f1c:	d802      	bhi.n	8001f24 <HAL_GPIO_Init+0x14c>
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	e002      	b.n	8001f2a <HAL_GPIO_Init+0x152>
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	3b08      	subs	r3, #8
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	210f      	movs	r1, #15
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	fa01 f303 	lsl.w	r3, r1, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	6a39      	ldr	r1, [r7, #32]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	fa01 f303 	lsl.w	r3, r1, r3
 8001f44:	431a      	orrs	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 8090 	beq.w	8002078 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f58:	4b56      	ldr	r3, [pc, #344]	; (80020b4 <HAL_GPIO_Init+0x2dc>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	4a55      	ldr	r2, [pc, #340]	; (80020b4 <HAL_GPIO_Init+0x2dc>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6193      	str	r3, [r2, #24]
 8001f64:	4b53      	ldr	r3, [pc, #332]	; (80020b4 <HAL_GPIO_Init+0x2dc>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f70:	4a51      	ldr	r2, [pc, #324]	; (80020b8 <HAL_GPIO_Init+0x2e0>)
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	3302      	adds	r3, #2
 8001f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4013      	ands	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a49      	ldr	r2, [pc, #292]	; (80020bc <HAL_GPIO_Init+0x2e4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d00d      	beq.n	8001fb8 <HAL_GPIO_Init+0x1e0>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a48      	ldr	r2, [pc, #288]	; (80020c0 <HAL_GPIO_Init+0x2e8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d007      	beq.n	8001fb4 <HAL_GPIO_Init+0x1dc>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a47      	ldr	r2, [pc, #284]	; (80020c4 <HAL_GPIO_Init+0x2ec>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d101      	bne.n	8001fb0 <HAL_GPIO_Init+0x1d8>
 8001fac:	2302      	movs	r3, #2
 8001fae:	e004      	b.n	8001fba <HAL_GPIO_Init+0x1e2>
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e002      	b.n	8001fba <HAL_GPIO_Init+0x1e2>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_GPIO_Init+0x1e2>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fbc:	f002 0203 	and.w	r2, r2, #3
 8001fc0:	0092      	lsls	r2, r2, #2
 8001fc2:	4093      	lsls	r3, r2
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fca:	493b      	ldr	r1, [pc, #236]	; (80020b8 <HAL_GPIO_Init+0x2e0>)
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d006      	beq.n	8001ff2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fe4:	4b38      	ldr	r3, [pc, #224]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4937      	ldr	r1, [pc, #220]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]
 8001ff0:	e006      	b.n	8002000 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ff2:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	4933      	ldr	r1, [pc, #204]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800200c:	4b2e      	ldr	r3, [pc, #184]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	492d      	ldr	r1, [pc, #180]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800201a:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	43db      	mvns	r3, r3
 8002022:	4929      	ldr	r1, [pc, #164]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 8002024:	4013      	ands	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d006      	beq.n	8002042 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002034:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	4923      	ldr	r1, [pc, #140]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	608b      	str	r3, [r1, #8]
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002042:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	43db      	mvns	r3, r3
 800204a:	491f      	ldr	r1, [pc, #124]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 800204c:	4013      	ands	r3, r2
 800204e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d006      	beq.n	800206a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	4919      	ldr	r1, [pc, #100]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	60cb      	str	r3, [r1, #12]
 8002068:	e006      	b.n	8002078 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800206a:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	43db      	mvns	r3, r3
 8002072:	4915      	ldr	r1, [pc, #84]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 8002074:	4013      	ands	r3, r2
 8002076:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	3301      	adds	r3, #1
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	f47f aeaf 	bne.w	8001dec <HAL_GPIO_Init+0x14>
  }
}
 800208e:	bf00      	nop
 8002090:	bf00      	nop
 8002092:	372c      	adds	r7, #44	; 0x2c
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	10320000 	.word	0x10320000
 80020a0:	10310000 	.word	0x10310000
 80020a4:	10220000 	.word	0x10220000
 80020a8:	10210000 	.word	0x10210000
 80020ac:	10120000 	.word	0x10120000
 80020b0:	10110000 	.word	0x10110000
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40010000 	.word	0x40010000
 80020bc:	40010800 	.word	0x40010800
 80020c0:	40010c00 	.word	0x40010c00
 80020c4:	40011000 	.word	0x40011000
 80020c8:	40010400 	.word	0x40010400

080020cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	887b      	ldrh	r3, [r7, #2]
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
 80020e8:	e001      	b.n	80020ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr

080020fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	460b      	mov	r3, r1
 8002104:	807b      	strh	r3, [r7, #2]
 8002106:	4613      	mov	r3, r2
 8002108:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800210a:	787b      	ldrb	r3, [r7, #1]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002110:	887a      	ldrh	r2, [r7, #2]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002116:	e003      	b.n	8002120 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002118:	887b      	ldrh	r3, [r7, #2]
 800211a:	041a      	lsls	r2, r3, #16
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	611a      	str	r2, [r3, #16]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr

0800212a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800213c:	887a      	ldrh	r2, [r7, #2]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4013      	ands	r3, r2
 8002142:	041a      	lsls	r2, r3, #16
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	43d9      	mvns	r1, r3
 8002148:	887b      	ldrh	r3, [r7, #2]
 800214a:	400b      	ands	r3, r1
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	611a      	str	r2, [r3, #16]
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e26c      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8087 	beq.w	800228a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800217c:	4b92      	ldr	r3, [pc, #584]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	2b04      	cmp	r3, #4
 8002186:	d00c      	beq.n	80021a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002188:	4b8f      	ldr	r3, [pc, #572]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 030c 	and.w	r3, r3, #12
 8002190:	2b08      	cmp	r3, #8
 8002192:	d112      	bne.n	80021ba <HAL_RCC_OscConfig+0x5e>
 8002194:	4b8c      	ldr	r3, [pc, #560]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a0:	d10b      	bne.n	80021ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a2:	4b89      	ldr	r3, [pc, #548]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d06c      	beq.n	8002288 <HAL_RCC_OscConfig+0x12c>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d168      	bne.n	8002288 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e246      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c2:	d106      	bne.n	80021d2 <HAL_RCC_OscConfig+0x76>
 80021c4:	4b80      	ldr	r3, [pc, #512]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a7f      	ldr	r2, [pc, #508]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	e02e      	b.n	8002230 <HAL_RCC_OscConfig+0xd4>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x98>
 80021da:	4b7b      	ldr	r3, [pc, #492]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a7a      	ldr	r2, [pc, #488]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	4b78      	ldr	r3, [pc, #480]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a77      	ldr	r2, [pc, #476]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e01d      	b.n	8002230 <HAL_RCC_OscConfig+0xd4>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0xbc>
 80021fe:	4b72      	ldr	r3, [pc, #456]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a71      	ldr	r2, [pc, #452]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b6f      	ldr	r3, [pc, #444]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a6e      	ldr	r2, [pc, #440]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e00b      	b.n	8002230 <HAL_RCC_OscConfig+0xd4>
 8002218:	4b6b      	ldr	r3, [pc, #428]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a6a      	ldr	r2, [pc, #424]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800221e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	4b68      	ldr	r3, [pc, #416]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a67      	ldr	r2, [pc, #412]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800222a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d013      	beq.n	8002260 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff fcb6 	bl	8001ba8 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002240:	f7ff fcb2 	bl	8001ba8 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	; 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e1fa      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	4b5d      	ldr	r3, [pc, #372]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0xe4>
 800225e:	e014      	b.n	800228a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7ff fca2 	bl	8001ba8 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002268:	f7ff fc9e 	bl	8001ba8 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	; 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e1e6      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227a:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x10c>
 8002286:	e000      	b.n	800228a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d063      	beq.n	800235e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002296:	4b4c      	ldr	r3, [pc, #304]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00b      	beq.n	80022ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022a2:	4b49      	ldr	r3, [pc, #292]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d11c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x18c>
 80022ae:	4b46      	ldr	r3, [pc, #280]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d116      	bne.n	80022e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ba:	4b43      	ldr	r3, [pc, #268]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_RCC_OscConfig+0x176>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e1ba      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4939      	ldr	r1, [pc, #228]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e6:	e03a      	b.n	800235e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d020      	beq.n	8002332 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f0:	4b36      	ldr	r3, [pc, #216]	; (80023cc <HAL_RCC_OscConfig+0x270>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7ff fc57 	bl	8001ba8 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022fe:	f7ff fc53 	bl	8001ba8 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e19b      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002310:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231c:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4927      	ldr	r1, [pc, #156]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800232c:	4313      	orrs	r3, r2
 800232e:	600b      	str	r3, [r1, #0]
 8002330:	e015      	b.n	800235e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002332:	4b26      	ldr	r3, [pc, #152]	; (80023cc <HAL_RCC_OscConfig+0x270>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7ff fc36 	bl	8001ba8 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002340:	f7ff fc32 	bl	8001ba8 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e17a      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002352:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d03a      	beq.n	80023e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d019      	beq.n	80023a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002372:	4b17      	ldr	r3, [pc, #92]	; (80023d0 <HAL_RCC_OscConfig+0x274>)
 8002374:	2201      	movs	r2, #1
 8002376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002378:	f7ff fc16 	bl	8001ba8 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002380:	f7ff fc12 	bl	8001ba8 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e15a      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002392:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800239e:	2001      	movs	r0, #1
 80023a0:	f000 faa6 	bl	80028f0 <RCC_Delay>
 80023a4:	e01c      	b.n	80023e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <HAL_RCC_OscConfig+0x274>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ac:	f7ff fbfc 	bl	8001ba8 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b2:	e00f      	b.n	80023d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b4:	f7ff fbf8 	bl	8001ba8 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d908      	bls.n	80023d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e140      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000
 80023cc:	42420000 	.word	0x42420000
 80023d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d4:	4b9e      	ldr	r3, [pc, #632]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1e9      	bne.n	80023b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80a6 	beq.w	800253a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f2:	4b97      	ldr	r3, [pc, #604]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10d      	bne.n	800241a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	4b94      	ldr	r3, [pc, #592]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	4a93      	ldr	r2, [pc, #588]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002408:	61d3      	str	r3, [r2, #28]
 800240a:	4b91      	ldr	r3, [pc, #580]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002416:	2301      	movs	r3, #1
 8002418:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241a:	4b8e      	ldr	r3, [pc, #568]	; (8002654 <HAL_RCC_OscConfig+0x4f8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d118      	bne.n	8002458 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002426:	4b8b      	ldr	r3, [pc, #556]	; (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a8a      	ldr	r2, [pc, #552]	; (8002654 <HAL_RCC_OscConfig+0x4f8>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002432:	f7ff fbb9 	bl	8001ba8 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243a:	f7ff fbb5 	bl	8001ba8 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b64      	cmp	r3, #100	; 0x64
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e0fd      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	4b81      	ldr	r3, [pc, #516]	; (8002654 <HAL_RCC_OscConfig+0x4f8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d106      	bne.n	800246e <HAL_RCC_OscConfig+0x312>
 8002460:	4b7b      	ldr	r3, [pc, #492]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	4a7a      	ldr	r2, [pc, #488]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6213      	str	r3, [r2, #32]
 800246c:	e02d      	b.n	80024ca <HAL_RCC_OscConfig+0x36e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x334>
 8002476:	4b76      	ldr	r3, [pc, #472]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	4a75      	ldr	r2, [pc, #468]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	6213      	str	r3, [r2, #32]
 8002482:	4b73      	ldr	r3, [pc, #460]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4a72      	ldr	r2, [pc, #456]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002488:	f023 0304 	bic.w	r3, r3, #4
 800248c:	6213      	str	r3, [r2, #32]
 800248e:	e01c      	b.n	80024ca <HAL_RCC_OscConfig+0x36e>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b05      	cmp	r3, #5
 8002496:	d10c      	bne.n	80024b2 <HAL_RCC_OscConfig+0x356>
 8002498:	4b6d      	ldr	r3, [pc, #436]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	4a6c      	ldr	r2, [pc, #432]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800249e:	f043 0304 	orr.w	r3, r3, #4
 80024a2:	6213      	str	r3, [r2, #32]
 80024a4:	4b6a      	ldr	r3, [pc, #424]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	4a69      	ldr	r2, [pc, #420]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6213      	str	r3, [r2, #32]
 80024b0:	e00b      	b.n	80024ca <HAL_RCC_OscConfig+0x36e>
 80024b2:	4b67      	ldr	r3, [pc, #412]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	4a66      	ldr	r2, [pc, #408]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	6213      	str	r3, [r2, #32]
 80024be:	4b64      	ldr	r3, [pc, #400]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4a63      	ldr	r2, [pc, #396]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024c4:	f023 0304 	bic.w	r3, r3, #4
 80024c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d015      	beq.n	80024fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d2:	f7ff fb69 	bl	8001ba8 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d8:	e00a      	b.n	80024f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7ff fb65 	bl	8001ba8 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e0ab      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f0:	4b57      	ldr	r3, [pc, #348]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0ee      	beq.n	80024da <HAL_RCC_OscConfig+0x37e>
 80024fc:	e014      	b.n	8002528 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fe:	f7ff fb53 	bl	8001ba8 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002504:	e00a      	b.n	800251c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002506:	f7ff fb4f 	bl	8001ba8 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	f241 3288 	movw	r2, #5000	; 0x1388
 8002514:	4293      	cmp	r3, r2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e095      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800251c:	4b4c      	ldr	r3, [pc, #304]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1ee      	bne.n	8002506 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002528:	7dfb      	ldrb	r3, [r7, #23]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d105      	bne.n	800253a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252e:	4b48      	ldr	r3, [pc, #288]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	4a47      	ldr	r2, [pc, #284]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002538:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 8081 	beq.w	8002646 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002544:	4b42      	ldr	r3, [pc, #264]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	2b08      	cmp	r3, #8
 800254e:	d061      	beq.n	8002614 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d146      	bne.n	80025e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002558:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <HAL_RCC_OscConfig+0x4fc>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7ff fb23 	bl	8001ba8 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002566:	f7ff fb1f 	bl	8001ba8 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e067      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002578:	4b35      	ldr	r3, [pc, #212]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258c:	d108      	bne.n	80025a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800258e:	4b30      	ldr	r3, [pc, #192]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	492d      	ldr	r1, [pc, #180]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a0:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a19      	ldr	r1, [r3, #32]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	430b      	orrs	r3, r1
 80025b2:	4927      	ldr	r1, [pc, #156]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HAL_RCC_OscConfig+0x4fc>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7ff faf3 	bl	8001ba8 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c6:	f7ff faef 	bl	8001ba8 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e037      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d8:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x46a>
 80025e4:	e02f      	b.n	8002646 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e6:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <HAL_RCC_OscConfig+0x4fc>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7ff fadc 	bl	8001ba8 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f4:	f7ff fad8 	bl	8001ba8 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e020      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x498>
 8002612:	e018      	b.n	8002646 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e013      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	429a      	cmp	r2, r3
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d001      	beq.n	8002646 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40021000 	.word	0x40021000
 8002654:	40007000 	.word	0x40007000
 8002658:	42420060 	.word	0x42420060

0800265c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0d0      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002670:	4b6a      	ldr	r3, [pc, #424]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d910      	bls.n	80026a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b67      	ldr	r3, [pc, #412]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 0207 	bic.w	r2, r3, #7
 8002686:	4965      	ldr	r1, [pc, #404]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b63      	ldr	r3, [pc, #396]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0b8      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d020      	beq.n	80026ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b8:	4b59      	ldr	r3, [pc, #356]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a58      	ldr	r2, [pc, #352]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d0:	4b53      	ldr	r3, [pc, #332]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4a52      	ldr	r2, [pc, #328]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026dc:	4b50      	ldr	r3, [pc, #320]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	494d      	ldr	r1, [pc, #308]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d040      	beq.n	800277c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d107      	bne.n	8002712 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	4b47      	ldr	r3, [pc, #284]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d115      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e07f      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271a:	4b41      	ldr	r3, [pc, #260]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e073      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272a:	4b3d      	ldr	r3, [pc, #244]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e06b      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273a:	4b39      	ldr	r3, [pc, #228]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f023 0203 	bic.w	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4936      	ldr	r1, [pc, #216]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800274c:	f7ff fa2c 	bl	8001ba8 <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	e00a      	b.n	800276a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f7ff fa28 	bl	8001ba8 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e053      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 020c 	and.w	r2, r3, #12
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	429a      	cmp	r2, r3
 800277a:	d1eb      	bne.n	8002754 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800277c:	4b27      	ldr	r3, [pc, #156]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d210      	bcs.n	80027ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b24      	ldr	r3, [pc, #144]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 0207 	bic.w	r2, r3, #7
 8002792:	4922      	ldr	r1, [pc, #136]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b20      	ldr	r3, [pc, #128]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e032      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4916      	ldr	r1, [pc, #88]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d009      	beq.n	80027ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027d6:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	490e      	ldr	r1, [pc, #56]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ea:	f000 f821 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 80027ee:	4602      	mov	r2, r0
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	490a      	ldr	r1, [pc, #40]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 80027fc:	5ccb      	ldrb	r3, [r1, r3]
 80027fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002802:	4a09      	ldr	r2, [pc, #36]	; (8002828 <HAL_RCC_ClockConfig+0x1cc>)
 8002804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_RCC_ClockConfig+0x1d0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff f98a 	bl	8001b24 <HAL_InitTick>

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40022000 	.word	0x40022000
 8002820:	40021000 	.word	0x40021000
 8002824:	08003174 	.word	0x08003174
 8002828:	2000005c 	.word	0x2000005c
 800282c:	20000060 	.word	0x20000060

08002830 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002830:	b490      	push	{r4, r7}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002836:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002838:	1d3c      	adds	r4, r7, #4
 800283a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800283c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002840:	f240 2301 	movw	r3, #513	; 0x201
 8002844:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800285a:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b04      	cmp	r3, #4
 8002868:	d002      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0x40>
 800286a:	2b08      	cmp	r3, #8
 800286c:	d003      	beq.n	8002876 <HAL_RCC_GetSysClockFreq+0x46>
 800286e:	e02d      	b.n	80028cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002870:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002872:	623b      	str	r3, [r7, #32]
      break;
 8002874:	e02d      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	0c9b      	lsrs	r3, r3, #18
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002882:	4413      	add	r3, r2
 8002884:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002888:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d013      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	0c5b      	lsrs	r3, r3, #17
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028a2:	4413      	add	r3, r2
 80028a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	4a0e      	ldr	r2, [pc, #56]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ae:	fb02 f203 	mul.w	r2, r2, r3
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ba:	e004      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	4a0b      	ldr	r2, [pc, #44]	; (80028ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80028c0:	fb02 f303 	mul.w	r3, r2, r3
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	623b      	str	r3, [r7, #32]
      break;
 80028ca:	e002      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ce:	623b      	str	r3, [r7, #32]
      break;
 80028d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d2:	6a3b      	ldr	r3, [r7, #32]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3728      	adds	r7, #40	; 0x28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc90      	pop	{r4, r7}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	08003164 	.word	0x08003164
 80028e4:	40021000 	.word	0x40021000
 80028e8:	007a1200 	.word	0x007a1200
 80028ec:	003d0900 	.word	0x003d0900

080028f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028f8:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <RCC_Delay+0x34>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <RCC_Delay+0x38>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	0a5b      	lsrs	r3, r3, #9
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800290c:	bf00      	nop
  }
  while (Delay --);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1e5a      	subs	r2, r3, #1
 8002912:	60fa      	str	r2, [r7, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f9      	bne.n	800290c <RCC_Delay+0x1c>
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	2000005c 	.word	0x2000005c
 8002928:	10624dd3 	.word	0x10624dd3

0800292c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e041      	b.n	80029c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d106      	bne.n	8002958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff f84e 	bl	80019f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3304      	adds	r3, #4
 8002968:	4619      	mov	r1, r3
 800296a:	4610      	mov	r0, r2
 800296c:	f000 fa6a 	bl	8002e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d001      	beq.n	80029e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e035      	b.n	8002a50 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a16      	ldr	r2, [pc, #88]	; (8002a5c <HAL_TIM_Base_Start_IT+0x90>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d009      	beq.n	8002a1a <HAL_TIM_Base_Start_IT+0x4e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0e:	d004      	beq.n	8002a1a <HAL_TIM_Base_Start_IT+0x4e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <HAL_TIM_Base_Start_IT+0x94>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d111      	bne.n	8002a3e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b06      	cmp	r3, #6
 8002a2a:	d010      	beq.n	8002a4e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a3c:	e007      	b.n	8002a4e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 0201 	orr.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40012c00 	.word	0x40012c00
 8002a60:	40000400 	.word	0x40000400

08002a64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d122      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d11b      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0202 	mvn.w	r2, #2
 8002a90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f9b1 	bl	8002e0e <HAL_TIM_IC_CaptureCallback>
 8002aac:	e005      	b.n	8002aba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f9a4 	bl	8002dfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f9b3 	bl	8002e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d122      	bne.n	8002b14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d11b      	bne.n	8002b14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0204 	mvn.w	r2, #4
 8002ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f987 	bl	8002e0e <HAL_TIM_IC_CaptureCallback>
 8002b00:	e005      	b.n	8002b0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f97a 	bl	8002dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f989 	bl	8002e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d122      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d11b      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0208 	mvn.w	r2, #8
 8002b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f95d 	bl	8002e0e <HAL_TIM_IC_CaptureCallback>
 8002b54:	e005      	b.n	8002b62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f950 	bl	8002dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f95f 	bl	8002e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d122      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	d11b      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0210 	mvn.w	r2, #16
 8002b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2208      	movs	r2, #8
 8002b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f933 	bl	8002e0e <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f926 	bl	8002dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f935 	bl	8002e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d10e      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d107      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0201 	mvn.w	r2, #1
 8002be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fe fc98 	bl	8001518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf2:	2b80      	cmp	r3, #128	; 0x80
 8002bf4:	d10e      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c00:	2b80      	cmp	r3, #128	; 0x80
 8002c02:	d107      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fa67 	bl	80030e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b40      	cmp	r3, #64	; 0x40
 8002c20:	d10e      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2c:	2b40      	cmp	r3, #64	; 0x40
 8002c2e:	d107      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f8f9 	bl	8002e32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d10e      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0320 	and.w	r3, r3, #32
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	d107      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0220 	mvn.w	r2, #32
 8002c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fa32 	bl	80030d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_TIM_ConfigClockSource+0x18>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e0b3      	b.n	8002df4 <HAL_TIM_ConfigClockSource+0x180>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002caa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cb2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc4:	d03e      	beq.n	8002d44 <HAL_TIM_ConfigClockSource+0xd0>
 8002cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cca:	f200 8087 	bhi.w	8002ddc <HAL_TIM_ConfigClockSource+0x168>
 8002cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd2:	f000 8085 	beq.w	8002de0 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cda:	d87f      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x168>
 8002cdc:	2b70      	cmp	r3, #112	; 0x70
 8002cde:	d01a      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0xa2>
 8002ce0:	2b70      	cmp	r3, #112	; 0x70
 8002ce2:	d87b      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x168>
 8002ce4:	2b60      	cmp	r3, #96	; 0x60
 8002ce6:	d050      	beq.n	8002d8a <HAL_TIM_ConfigClockSource+0x116>
 8002ce8:	2b60      	cmp	r3, #96	; 0x60
 8002cea:	d877      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x168>
 8002cec:	2b50      	cmp	r3, #80	; 0x50
 8002cee:	d03c      	beq.n	8002d6a <HAL_TIM_ConfigClockSource+0xf6>
 8002cf0:	2b50      	cmp	r3, #80	; 0x50
 8002cf2:	d873      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x168>
 8002cf4:	2b40      	cmp	r3, #64	; 0x40
 8002cf6:	d058      	beq.n	8002daa <HAL_TIM_ConfigClockSource+0x136>
 8002cf8:	2b40      	cmp	r3, #64	; 0x40
 8002cfa:	d86f      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x168>
 8002cfc:	2b30      	cmp	r3, #48	; 0x30
 8002cfe:	d064      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x156>
 8002d00:	2b30      	cmp	r3, #48	; 0x30
 8002d02:	d86b      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x168>
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d060      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x156>
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d867      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x168>
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d05c      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x156>
 8002d10:	2b10      	cmp	r3, #16
 8002d12:	d05a      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d14:	e062      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6899      	ldr	r1, [r3, #8]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f000 f95c 	bl	8002fe2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d38:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	609a      	str	r2, [r3, #8]
      break;
 8002d42:	e04e      	b.n	8002de2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6818      	ldr	r0, [r3, #0]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	6899      	ldr	r1, [r3, #8]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f000 f945 	bl	8002fe2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d66:	609a      	str	r2, [r3, #8]
      break;
 8002d68:	e03b      	b.n	8002de2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6859      	ldr	r1, [r3, #4]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	461a      	mov	r2, r3
 8002d78:	f000 f8bc 	bl	8002ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2150      	movs	r1, #80	; 0x50
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f913 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002d88:	e02b      	b.n	8002de2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6859      	ldr	r1, [r3, #4]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	461a      	mov	r2, r3
 8002d98:	f000 f8da 	bl	8002f50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2160      	movs	r1, #96	; 0x60
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 f903 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002da8:	e01b      	b.n	8002de2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6859      	ldr	r1, [r3, #4]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	461a      	mov	r2, r3
 8002db8:	f000 f89c 	bl	8002ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2140      	movs	r1, #64	; 0x40
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 f8f3 	bl	8002fae <TIM_ITRx_SetConfig>
      break;
 8002dc8:	e00b      	b.n	8002de2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	f000 f8ea 	bl	8002fae <TIM_ITRx_SetConfig>
        break;
 8002dda:	e002      	b.n	8002de2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ddc:	bf00      	nop
 8002dde:	e000      	b.n	8002de2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002de0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a25      	ldr	r2, [pc, #148]	; (8002eec <TIM_Base_SetConfig+0xa8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d007      	beq.n	8002e6c <TIM_Base_SetConfig+0x28>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e62:	d003      	beq.n	8002e6c <TIM_Base_SetConfig+0x28>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a22      	ldr	r2, [pc, #136]	; (8002ef0 <TIM_Base_SetConfig+0xac>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d108      	bne.n	8002e7e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a1a      	ldr	r2, [pc, #104]	; (8002eec <TIM_Base_SetConfig+0xa8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d007      	beq.n	8002e96 <TIM_Base_SetConfig+0x52>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8c:	d003      	beq.n	8002e96 <TIM_Base_SetConfig+0x52>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a17      	ldr	r2, [pc, #92]	; (8002ef0 <TIM_Base_SetConfig+0xac>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d108      	bne.n	8002ea8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a07      	ldr	r2, [pc, #28]	; (8002eec <TIM_Base_SetConfig+0xa8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d103      	bne.n	8002edc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	615a      	str	r2, [r3, #20]
}
 8002ee2:	bf00      	nop
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	40000400 	.word	0x40000400

08002ef4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	f023 0201 	bic.w	r2, r3, #1
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f023 030a 	bic.w	r3, r3, #10
 8002f30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	621a      	str	r2, [r3, #32]
}
 8002f46:	bf00      	nop
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f023 0210 	bic.w	r2, r3, #16
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	031b      	lsls	r3, r3, #12
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	621a      	str	r2, [r3, #32]
}
 8002fa4:	bf00      	nop
 8002fa6:	371c      	adds	r7, #28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b085      	sub	sp, #20
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f043 0307 	orr.w	r3, r3, #7
 8002fd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	609a      	str	r2, [r3, #8]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr

08002fe2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b087      	sub	sp, #28
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
 8002fee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ffc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	021a      	lsls	r2, r3, #8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	431a      	orrs	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	4313      	orrs	r3, r2
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	609a      	str	r2, [r3, #8]
}
 8003016:	bf00      	nop
 8003018:	371c      	adds	r7, #28
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003034:	2302      	movs	r3, #2
 8003036:	e041      	b.n	80030bc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a14      	ldr	r2, [pc, #80]	; (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d009      	beq.n	8003090 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003084:	d004      	beq.n	8003090 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a10      	ldr	r2, [pc, #64]	; (80030cc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d10c      	bne.n	80030aa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003096:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40000400 	.word	0x40000400

080030d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <__libc_init_array>:
 80030f4:	b570      	push	{r4, r5, r6, lr}
 80030f6:	2600      	movs	r6, #0
 80030f8:	4d0c      	ldr	r5, [pc, #48]	; (800312c <__libc_init_array+0x38>)
 80030fa:	4c0d      	ldr	r4, [pc, #52]	; (8003130 <__libc_init_array+0x3c>)
 80030fc:	1b64      	subs	r4, r4, r5
 80030fe:	10a4      	asrs	r4, r4, #2
 8003100:	42a6      	cmp	r6, r4
 8003102:	d109      	bne.n	8003118 <__libc_init_array+0x24>
 8003104:	f000 f822 	bl	800314c <_init>
 8003108:	2600      	movs	r6, #0
 800310a:	4d0a      	ldr	r5, [pc, #40]	; (8003134 <__libc_init_array+0x40>)
 800310c:	4c0a      	ldr	r4, [pc, #40]	; (8003138 <__libc_init_array+0x44>)
 800310e:	1b64      	subs	r4, r4, r5
 8003110:	10a4      	asrs	r4, r4, #2
 8003112:	42a6      	cmp	r6, r4
 8003114:	d105      	bne.n	8003122 <__libc_init_array+0x2e>
 8003116:	bd70      	pop	{r4, r5, r6, pc}
 8003118:	f855 3b04 	ldr.w	r3, [r5], #4
 800311c:	4798      	blx	r3
 800311e:	3601      	adds	r6, #1
 8003120:	e7ee      	b.n	8003100 <__libc_init_array+0xc>
 8003122:	f855 3b04 	ldr.w	r3, [r5], #4
 8003126:	4798      	blx	r3
 8003128:	3601      	adds	r6, #1
 800312a:	e7f2      	b.n	8003112 <__libc_init_array+0x1e>
 800312c:	08003184 	.word	0x08003184
 8003130:	08003184 	.word	0x08003184
 8003134:	08003184 	.word	0x08003184
 8003138:	08003188 	.word	0x08003188

0800313c <memset>:
 800313c:	4603      	mov	r3, r0
 800313e:	4402      	add	r2, r0
 8003140:	4293      	cmp	r3, r2
 8003142:	d100      	bne.n	8003146 <memset+0xa>
 8003144:	4770      	bx	lr
 8003146:	f803 1b01 	strb.w	r1, [r3], #1
 800314a:	e7f9      	b.n	8003140 <memset+0x4>

0800314c <_init>:
 800314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314e:	bf00      	nop
 8003150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003152:	bc08      	pop	{r3}
 8003154:	469e      	mov	lr, r3
 8003156:	4770      	bx	lr

08003158 <_fini>:
 8003158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315a:	bf00      	nop
 800315c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315e:	bc08      	pop	{r3}
 8003160:	469e      	mov	lr, r3
 8003162:	4770      	bx	lr
